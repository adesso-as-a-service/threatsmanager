// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.44
//  </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Xml.Serialization;

#pragma warning disable
namespace ThreatsManager.Extensions.Panels.ThreatSources.Cwe
{
    /// <summary>
/// Each Weakness element represents an actual weakness entry in CWE,
/// such as CWE-311 Failure to Encrypt Sensitive Data or CWE-326 Weak Encryption.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(AnonymousType=true)]
[XmlRoot(Namespace="", IsNullable=false)]
public partial class Weakness
{
    #region Private fields
    private CategoryDescription _description;
    private List<Relationship> _relationships;
    private List<Structured_Text_Type> _relationship_Notes;
    private List<CategoryWeakness_Ordinality> _weakness_Ordinalities;
    private CategoryApplicable_Platforms _applicable_Platforms;
    private List<Structured_Text_Type> _maintenance_Notes;
    private List<Structured_Text_Type> _background_Details;
    private List<Structured_Text_Type> _other_Notes;
    private List<Alternate_TermsAlternate_Term> _alternate_Terms;
    private List<Structured_Text_Type> _terminology_Notes;
    private List<SDLC_Phase_Type> _time_of_Introduction;
    private List<Structured_Text_Type> _modes_of_Introduction;
    private List<Structured_Text_Type> _enabling_Factors_for_Exploitation;
    private CategoryLikelihood_of_Exploit _likelihood_of_Exploit;
    private List<Common_Consequence> _common_Consequences;
    private List<CategoryDetection_Method> _detection_Methods;
    private List<Mitigation> _potential_Mitigations;
    private CategoryCausal_Nature _causal_Nature;
    private List<CategoryDemonstrative_Example> _demonstrative_Examples;
    private List<CategoryObserved_Example> _observed_Examples;
    private List<Structured_Text_Type> _theoretical_Notes;
    private List<string> _functional_Areas;
    private List<CategoryRelevant_Property> _relevant_Properties;
    private List<CategoryAffected_Resource> _affected_Resources;
    private List<Structured_Text_Type> _research_Gaps;
    private List<Reference_Type> _references;
    private List<CategoryTaxonomy_Mapping> _taxonomy_Mappings;
    private List<Structured_Text_Type> _white_Box_Definitions;
    private List<Structured_Text_Type> _black_Box_Definitions;
    private List<CategoryRelated_Attack_Pattern> _related_Attack_Patterns;
    private Content_History _content_History;
    private string _id;
    private string _name;
    private WeaknessWeakness_Abstraction _weakness_Abstraction;
    private Status_Type _status;
    #endregion
    
    /// <summary>
    /// Weakness class constructor
    /// </summary>
    public Weakness()
    {
        _content_History = new Content_History();
        _related_Attack_Patterns = new List<CategoryRelated_Attack_Pattern>();
        _black_Box_Definitions = new List<Structured_Text_Type>();
        _white_Box_Definitions = new List<Structured_Text_Type>();
        _taxonomy_Mappings = new List<CategoryTaxonomy_Mapping>();
        _references = new List<Reference_Type>();
        _research_Gaps = new List<Structured_Text_Type>();
        _affected_Resources = new List<CategoryAffected_Resource>();
        _relevant_Properties = new List<CategoryRelevant_Property>();
        _functional_Areas = new List<string>();
        _theoretical_Notes = new List<Structured_Text_Type>();
        _observed_Examples = new List<CategoryObserved_Example>();
        _demonstrative_Examples = new List<CategoryDemonstrative_Example>();
        _potential_Mitigations = new List<Mitigation>();
        _detection_Methods = new List<CategoryDetection_Method>();
        _common_Consequences = new List<Common_Consequence>();
        _enabling_Factors_for_Exploitation = new List<Structured_Text_Type>();
        _modes_of_Introduction = new List<Structured_Text_Type>();
        _time_of_Introduction = new List<SDLC_Phase_Type>();
        _terminology_Notes = new List<Structured_Text_Type>();
        _alternate_Terms = new List<Alternate_TermsAlternate_Term>();
        _other_Notes = new List<Structured_Text_Type>();
        _background_Details = new List<Structured_Text_Type>();
        _maintenance_Notes = new List<Structured_Text_Type>();
        _applicable_Platforms = new CategoryApplicable_Platforms();
        _weakness_Ordinalities = new List<CategoryWeakness_Ordinality>();
        _relationship_Notes = new List<Structured_Text_Type>();
        _relationships = new List<Relationship>();
        _description = new CategoryDescription();
    }
    
    /// <summary>
    /// This field provides a description of this Structure, whether
    /// it is a Weakness, Category or Compound Element. Its primary subelement is
    /// Description_Summary which is intended to serve as a minimalistic description
    /// which provides the information necessary to understand the primary focus of
    /// this entry. Additionally, it has the subelement Extended_Description which
    /// is optional and is used to provide further information pertaining to this
    /// weakness.
    /// </summary>
    public CategoryDescription Description
    {
        get
        {
            return _description;
        }
        set
        {
            _description = value;
        }
    }
    
    [XmlArrayItem("Relationship", IsNullable=false)]
    public List<Relationship> Relationships
    {
        get
        {
            return _relationships;
        }
        set
        {
            _relationships = value;
        }
    }
    
    [XmlArrayItem("Relationship_Note", IsNullable=false)]
    public List<Structured_Text_Type> Relationship_Notes
    {
        get
        {
            return _relationship_Notes;
        }
        set
        {
            _relationship_Notes = value;
        }
    }
    
    /// <summary>
    /// This element contains one or more Weakness_Ordinality
    /// elements, each of which describes when this entry is primary - where the
    /// weakness exists independent of other weaknesses, or when this entry might be
    /// resultant - where the weakness is typically related to the presence of some
    /// other weaknesses. This should be filled out for all Weakness Base and
    /// Variant entries.
    /// </summary>
    [XmlArrayItem("Weakness_Ordinality", IsNullable=false)]
    public List<CategoryWeakness_Ordinality> Weakness_Ordinalities
    {
        get
        {
            return _weakness_Ordinalities;
        }
        set
        {
            _weakness_Ordinalities = value;
        }
    }
    
    /// <summary>
    /// This structure contains the Languages, Operating_Systems,
    /// Hardware_Architectures, Architectural_Paradigms, Environments,
    /// Technology_Classes or Common Platforms on which this entry may exist. This
    /// should be filled out as much as possible for all Compound_Element and
    /// Weakness entries.
    /// </summary>
    public CategoryApplicable_Platforms Applicable_Platforms
    {
        get
        {
            return _applicable_Platforms;
        }
        set
        {
            _applicable_Platforms = value;
        }
    }
    
    [XmlArrayItem("Maintenance_Note", IsNullable=false)]
    public List<Structured_Text_Type> Maintenance_Notes
    {
        get
        {
            return _maintenance_Notes;
        }
        set
        {
            _maintenance_Notes = value;
        }
    }
    
    /// <summary>
    /// This structure contains one or more Background_Detail
    /// elements, each of which holds information regarding the entry or any
    /// technologies that are related to it, where the background information is not
    /// related to the nature of the entry itself. It should be filled out where
    /// appropriate.
    /// </summary>
    [XmlArrayItem("Background_Detail", IsNullable=false)]
    public List<Structured_Text_Type> Background_Details
    {
        get
        {
            return _background_Details;
        }
        set
        {
            _background_Details = value;
        }
    }
    
    [XmlArrayItem("Note", IsNullable=false)]
    public List<Structured_Text_Type> Other_Notes
    {
        get
        {
            return _other_Notes;
        }
        set
        {
            _other_Notes = value;
        }
    }
    
    [XmlArrayItem("Alternate_Term", IsNullable=false)]
    public List<Alternate_TermsAlternate_Term> Alternate_Terms
    {
        get
        {
            return _alternate_Terms;
        }
        set
        {
            _alternate_Terms = value;
        }
    }
    
    /// <summary>
    /// This element contains one or more Terminology_Note elements
    /// that each contain a discussion of terminology issues related to this
    /// weakness. It is different from the Alternate_Terms element, which is focused
    /// on discussion of specific terms that are commonly used. It should be filled
    /// out in any entry for which there is no established terminology, or if there
    /// are multiple uses of the same key term.
    /// </summary>
    [XmlArrayItem("Terminology_Note", IsNullable=false)]
    public List<Structured_Text_Type> Terminology_Notes
    {
        get
        {
            return _terminology_Notes;
        }
        set
        {
            _terminology_Notes = value;
        }
    }
    
    /// <summary>
    /// The Time_of_Introduction element contains the points of time
    /// in the software life cycle at which the weakness may be introduced. If there
    /// are multiple points of time at which the weakness may be introduced, then
    /// separate Introduction elements should be included for each. This element
    /// should be populated for all weakness bases and variants.
    /// </summary>
    [XmlArrayItem("Introductory_Phase", IsNullable=false)]
    public List<SDLC_Phase_Type> Time_of_Introduction
    {
        get
        {
            return _time_of_Introduction;
        }
        set
        {
            _time_of_Introduction = value;
        }
    }
    
    /// <summary>
    /// This element describes the typical scenarios under which this
    /// weakness can be introduced into the software. It should be filled out as
    /// needed.
    /// </summary>
    [XmlArrayItem("Mode_of_Introduction", IsNullable=false)]
    public List<Structured_Text_Type> Modes_of_Introduction
    {
        get
        {
            return _modes_of_Introduction;
        }
        set
        {
            _modes_of_Introduction = value;
        }
    }
    
    /// <summary>
    /// This element contains one or more
    /// Enabling_Factor_for_Exploitation, each of which points out conditions or
    /// factors that could increase the likelihood of exploit for this weakness.
    /// This should be filled out for most weakness bases.
    /// </summary>
    [XmlArrayItem("Enabling_Factor_for_Exploitation", IsNullable=false)]
    public List<Structured_Text_Type> Enabling_Factors_for_Exploitation
    {
        get
        {
            return _enabling_Factors_for_Exploitation;
        }
        set
        {
            _enabling_Factors_for_Exploitation = value;
        }
    }
    
    /// <summary>
    /// This element contains a rough estimate at the likelihood of
    /// exploitation of an exposed weakness. Many factors can impact this value
    /// which is why it should only be regarded as an approximation.
    /// </summary>
    public CategoryLikelihood_of_Exploit Likelihood_of_Exploit
    {
        get
        {
            return _likelihood_of_Exploit;
        }
        set
        {
            _likelihood_of_Exploit = value;
        }
    }
    
    /// <summary>
    /// This element contains the common consequences associated with
    /// this weakness. It is populated by one or more individual Common_Consequence
    /// subelements. This should be included and completed as much as possible for
    /// all weaknesses.
    /// </summary>
    [XmlArrayItem("Common_Consequence", IsNullable=false)]
    public List<Common_Consequence> Common_Consequences
    {
        get
        {
            return _common_Consequences;
        }
        set
        {
            _common_Consequences = value;
        }
    }
    
    /// <summary>
    /// The Detection_Methods element is comprised of one or more
    /// Detection_Method elements which identify methods that may be employed to
    /// detect this weakness.
    /// </summary>
    [XmlArrayItem("Detection_Method", IsNullable=false)]
    public List<CategoryDetection_Method> Detection_Methods
    {
        get
        {
            return _detection_Methods;
        }
        set
        {
            _detection_Methods = value;
        }
    }
    
    /// <summary>
    /// This element contains the potential mitigations associated
    /// with this weakness. It contains one or more mitigation subelements which
    /// each represent individual mitigations for this weakness. This should be
    /// included and completed to the extent possible for all weakness bases and
    /// variants.
    /// </summary>
    [XmlArrayItem("Mitigation", IsNullable=false)]
    public List<Mitigation> Potential_Mitigations
    {
        get
        {
            return _potential_Mitigations;
        }
        set
        {
            _potential_Mitigations = value;
        }
    }
    
    /// <summary>
    /// This element describes the nature of the underlying cause of
    /// the weakness. Is it an implicit underlying weakness or is it an issue of
    /// behavior on the part of the software developer? Appropriate values are
    /// either Implicit, occurring regardless of developer behavior, or Explicit, an
    /// explicit weakness resulting from behavior of the developer.
    /// </summary>
    public CategoryCausal_Nature Causal_Nature
    {
        get
        {
            return _causal_Nature;
        }
        set
        {
            _causal_Nature = value;
        }
    }
    
    /// <summary>
    /// This structure contains one or more Demonstrative_Examples,
    /// each of which should contain an example illustrating the problem being
    /// described in this weakness.
    /// </summary>
    [XmlArrayItem("Demonstrative_Example", IsNullable=false)]
    public List<CategoryDemonstrative_Example> Demonstrative_Examples
    {
        get
        {
            return _demonstrative_Examples;
        }
        set
        {
            _demonstrative_Examples = value;
        }
    }
    
    /// <summary>
    /// This structure contains one or more Observed_Example
    /// elements, each of which is a reference to a specific observed instance of
    /// this weakness in the real world; typically this will be a CVE reference.
    /// </summary>
    [XmlArrayItem("Observed_Example", IsNullable=false)]
    public List<CategoryObserved_Example> Observed_Examples
    {
        get
        {
            return _observed_Examples;
        }
        set
        {
            _observed_Examples = value;
        }
    }
    
    /// <summary>
    /// This element contains one or more Theoretical_Note elements
    /// that each describe the weakness using vulnerability theory concepts. It
    /// should be filled out as needed, especially in cases where the application of
    /// vulnerability theory is not necessarily obvious for the
    /// weakness.
    /// </summary>
    [XmlArrayItem("Theoretical_Note", IsNullable=false)]
    public List<Structured_Text_Type> Theoretical_Notes
    {
        get
        {
            return _theoretical_Notes;
        }
        set
        {
            _theoretical_Notes = value;
        }
    }
    
    /// <summary>
    /// This structure contains one or more Functional_Area elements,
    /// each of which identifies the functional area of the software in which the
    /// weakness is most likely to occur. For example, CWE-178 Failure to Resolve
    /// Case Sensitivity is likely to occur in functional areas of software related
    /// to file processing and credentials.
    /// </summary>
    [XmlArrayItem("Functional_Area", IsNullable=false)]
    public List<string> Functional_Areas
    {
        get
        {
            return _functional_Areas;
        }
        set
        {
            _functional_Areas = value;
        }
    }
    
    /// <summary>
    /// This structure contains one or more Relevant_Property
    /// elements. Each Relevant_Property element identifies a property that is
    /// required by the code or a resource in order to function as specified.
    /// Correctly labeling all of the relevant properties can help to figure out
    /// what the root cause of a vulnerability might be.
    /// </summary>
    [XmlArrayItem("Relevant_Property", IsNullable=false)]
    public List<CategoryRelevant_Property> Relevant_Properties
    {
        get
        {
            return _relevant_Properties;
        }
        set
        {
            _relevant_Properties = value;
        }
    }
    
    /// <summary>
    /// This element identifies system resources affected by this
    /// entry. It is populated by Affected_Resource elements.
    /// </summary>
    [XmlArrayItem("Affected_Resource", IsNullable=false)]
    public List<CategoryAffected_Resource> Affected_Resources
    {
        get
        {
            return _affected_Resources;
        }
        set
        {
            _affected_Resources = value;
        }
    }
    
    [XmlArrayItem("Research_Gap", IsNullable=false)]
    public List<Structured_Text_Type> Research_Gaps
    {
        get
        {
            return _research_Gaps;
        }
        set
        {
            _research_Gaps = value;
        }
    }
    
    /// <summary>
    /// The References element contains one or more Reference
    /// elements, each of which provide further reading and insight into this
    /// weakness. This may include an alternate interpretation of this weakness, a
    /// deeper technical breakdown of this weakness such as a research paper, deeper
    /// information on mitigations, or background details on this technical area.
    /// This should be filled out for all weakness bases and some variants.
    /// </summary>
    [XmlArrayItem("Reference", IsNullable=false)]
    public List<Reference_Type> References
    {
        get
        {
            return _references;
        }
        set
        {
            _references = value;
        }
    }
    
    /// <summary>
    /// The Taxonomy_Mappings element contains one or more
    /// Taxonomy_Mapping structures which provide a mapping from this entry to an
    /// entry in a different taxonomy.
    /// </summary>
    [XmlArrayItem("Taxonomy_Mapping", IsNullable=false)]
    public List<CategoryTaxonomy_Mapping> Taxonomy_Mappings
    {
        get
        {
            return _taxonomy_Mappings;
        }
        set
        {
            _taxonomy_Mappings = value;
        }
    }
    
    /// <summary>
    /// This structure contains one or more White_Box_Definition
    /// elements, each of which describes the weakness from a white box perspective,
    /// meaning that the view includes the knowledge of control flow, data flow, and
    /// all other inner workings of the software in which the weakness exists.
    /// </summary>
    [XmlArrayItem("White_Box_Definition", IsNullable=false)]
    public List<Structured_Text_Type> White_Box_Definitions
    {
        get
        {
            return _white_Box_Definitions;
        }
        set
        {
            _white_Box_Definitions = value;
        }
    }
    
    /// <summary>
    /// This structure contains one or more Black_Box_Definition
    /// elements, each of which describes the weakness from an external perspective,
    /// meaning that the view includes no knowledge of how the software is
    /// processing data other than what can be inferred from observing the
    /// software's behavior.
    /// </summary>
    [XmlArrayItem("Black_Box_Definition", IsNullable=false)]
    public List<Structured_Text_Type> Black_Box_Definitions
    {
        get
        {
            return _black_Box_Definitions;
        }
        set
        {
            _black_Box_Definitions = value;
        }
    }
    
    /// <summary>
    /// The Related_Attack_Patterns element contains all references
    /// to CAPEC which will identify related attack patterns to this weakness. It
    /// has one or more Related_Attack_Pattern elements as children and each child
    /// will point to a single CAPEC entry which is associated with this weakness.
    /// This should be filled out to the extent possible for most weaknesses.
    /// </summary>
    [XmlArrayItem("Related_Attack_Pattern", IsNullable=false)]
    public List<CategoryRelated_Attack_Pattern> Related_Attack_Patterns
    {
        get
        {
            return _related_Attack_Patterns;
        }
        set
        {
            _related_Attack_Patterns = value;
        }
    }
    
    public Content_History Content_History
    {
        get
        {
            return _content_History;
        }
        set
        {
            _content_History = value;
        }
    }
    
    /// <summary>
    /// This attribute provides a unique identifier for the entry. It
    /// will be static for the lifetime of the entry. In the event that this entry
    /// becomes deprecated, the ID will not be reused and a pointer will be left in
    /// this entry to the replacement. This is required for all Weaknesses.
    /// </summary>
    [XmlAttribute(DataType="integer")]
    public string ID
    {
        get
        {
            return _id;
        }
        set
        {
            _id = value;
        }
    }
    
    /// <summary>
    /// This attribute is the string which identifies the entry. The
    /// name should focus on the weakness being described in the entry and should
    /// avoid focusing on the attack which exploits the weakness or the consequences
    /// of exploiting the weakness. All words in the entry name should be
    /// capitalized except for articles and prepositions unless they begin or end
    /// the name. Subsequent words in a hyphenated chain are also not capitalized.
    /// This is required for all Weaknesses.
    /// </summary>
    [XmlAttribute]
    public string Name
    {
        get
        {
            return _name;
        }
        set
        {
            _name = value;
        }
    }
    
    /// <summary>
    /// The Weakness_Abstraction attribute defines the abstraction
    /// level for this weakness. Acceptable values are "Class", which is the most
    /// abstract type of Weakness such as CWE-362 Race Conditions, "Base" which is a
    /// more specific type of weakness that is still mostly independent of a
    /// specific resource or technology such as CWE-567 Unsynchronized Access to
    /// Shared Data, and "Variant" which is a weakness specific to a particular
    /// resource, technology or context.
    /// </summary>
    [XmlAttribute]
    public WeaknessWeakness_Abstraction Weakness_Abstraction
    {
        get
        {
            return _weakness_Abstraction;
        }
        set
        {
            _weakness_Abstraction = value;
        }
    }
    
    /// <summary>
    /// The Status attribute defines the status level for this
    /// weakness.
    /// </summary>
    [XmlAttribute]
    public Status_Type Status
    {
        get
        {
            return _status;
        }
        set
        {
            _status = value;
        }
    }
}
}
#pragma warning restore
