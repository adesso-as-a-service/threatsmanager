// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.44
//  </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Xml.Serialization;

#pragma warning disable
namespace ThreatsManager.Extensions.Panels.ThreatSources.Capec
{
    /// <summary>
/// These are indicators that the application may or may not be susceptible to the given attack step (not necessarily the pattern as a whole).
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(AnonymousType=true, Namespace="http://capec.mitre.org/capec-2")]
public partial class Custom_Attack_StepTypeIndicator
{
    #region Private fields
    private Structured_Text_Type _indicator_Description;
    private Relevant_Attack_Surface_ElementsType _relevant_Attack_Surface_Elements;
    private string _environments;
    private ObservablesType2 _observables;
    private string _id;
    private Custom_Attack_StepTypeIndicatorType _type;
    #endregion
    
    /// <summary>
    /// Custom_Attack_StepTypeIndicator class constructor
    /// </summary>
    public Custom_Attack_StepTypeIndicator()
    {
        _observables = new ObservablesType2();
        _relevant_Attack_Surface_Elements = new Relevant_Attack_Surface_ElementsType();
        _indicator_Description = new Structured_Text_Type();
    }
    
    public Structured_Text_Type Indicator_Description
    {
        get => _indicator_Description;
        set => _indicator_Description = value;
    }
    
    public Relevant_Attack_Surface_ElementsType Relevant_Attack_Surface_Elements
    {
        get => _relevant_Attack_Surface_Elements;
        set => _relevant_Attack_Surface_Elements = value;
    }
    
    [XmlElement(DataType="IDREFS")]
    public string Environments
    {
        get => _environments;
        set => _environments = value;
    }
    
    public ObservablesType2 Observables
    {
        get => _observables;
        set => _observables = value;
    }
    
    /// <summary>
    /// This field contains a unique integer identifier for the indicator.
    /// </summary>
    [XmlAttribute(DataType="integer")]
    public string ID
    {
        get => _id;
        set => _id = value;
    }
    
    /// <summary>
    /// Each indicator has a mandatory type attribute that can be one of the values “Positive,” “Negative,” or “Inconclusive.” For example, a positive indicator of susceptibility to parameter tampering is the existence of parameters in the URL. Although it does not guarantee susceptibility, it indicates a cause for further examination. A negative indicator for the technique of privilege escalation is a lack of credentials and user identifiers in an application. Again, this is not a conclusive measure of resistance to attack, but an indicator that the attack step technique is unlikely to bear significant fruit. An inconclusive indicator of susceptibility to dynamic code injection is a page whose URL ends in .jsp, .asp, or .do but which has no visible explicit parameters. Such URLs typically indicate dynamic processing, but since no visible parameters are passed, it is inconclusive whether dynamic code could be injected into the application.
    /// </summary>
    [XmlAttribute]
    public Custom_Attack_StepTypeIndicatorType type
    {
        get => _type;
        set => _type = value;
    }
}
}
#pragma warning restore
