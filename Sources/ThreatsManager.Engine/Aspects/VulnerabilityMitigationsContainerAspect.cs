using System;
using System.Collections.Generic;
using System.Linq;
using PostSharp.Aspects;
using PostSharp.Aspects.Advices;
using PostSharp.Aspects.Dependencies;
using PostSharp.Patterns.Collections;
using PostSharp.Serialization;
using ThreatsManager.Engine.ObjectModel.ThreatsMitigations;
using ThreatsManager.Interfaces.ObjectModel;
using ThreatsManager.Interfaces.ObjectModel.ThreatsMitigations;
using ThreatsManager.Utilities;
using ThreatsManager.Utilities.Aspects.Engine;

namespace ThreatsManager.Engine.Aspects
{
    //#region Additional placeholders required.
    //[Child]
    //[JsonProperty("mitigations")]
    //private AdvisableCollection<VulnerabilityMitigation> _mitigations { get; set; }
    //#endregion    

    [PSerializable]
    [AspectTypeDependency(AspectDependencyAction.Order, AspectDependencyPosition.Before, typeof(SimpleNotifyPropertyChangedAttribute))]
    public class VulnerabilityMitigationsContainerAspect : InstanceLevelAspect
    {
        #region Extra elements to be added.
        [ImportMember(nameof(_mitigations))]
        public Property<AdvisableCollection<VulnerabilityMitigation>> _mitigations;
        #endregion

        #region Implementation of interface IVulnerabilityMitigationsContainer.
        private Action<IVulnerabilityMitigationsContainer, IVulnerabilityMitigation> _vulnerabilityMitigationAdded;

        [OnEventAddHandlerAdvice]
        [MulticastPointcut(MemberName = "VulnerabilityMitigationAdded", Targets = PostSharp.Extensibility.MulticastTargets.Event, Attributes = PostSharp.Extensibility.MulticastAttributes.AnyVisibility)]
        public void OnVulnerabilityMitigationAddedAdd(EventInterceptionArgs args)
        {
            if (_vulnerabilityMitigationAdded == null || !_vulnerabilityMitigationAdded.GetInvocationList().Contains(args.Handler))
            {
                _vulnerabilityMitigationAdded += (Action<IVulnerabilityMitigationsContainer, IVulnerabilityMitigation>)args.Handler;
                args.ProceedAddHandler();
            }
        }

        [OnEventRemoveHandlerAdvice(Master = nameof(OnVulnerabilityMitigationAddedAdd))]
        public void OnVulnerabilityMitigationAddedRemove(EventInterceptionArgs args)
        {
            _vulnerabilityMitigationAdded -= (Action<IVulnerabilityMitigationsContainer, IVulnerabilityMitigation>)args.Handler;
            args.ProceedRemoveHandler();
        }

        private Action<IVulnerabilityMitigationsContainer, IVulnerabilityMitigation> _vulnerabilityMitigationRemoved;

        [OnEventAddHandlerAdvice]
        [MulticastPointcut(MemberName = "VulnerabilityMitigationRemoved", Targets = PostSharp.Extensibility.MulticastTargets.Event, Attributes = PostSharp.Extensibility.MulticastAttributes.AnyVisibility)]
        public void OnVulnerabilityMitigationRemovedAdd(EventInterceptionArgs args)
        {
            if (_vulnerabilityMitigationRemoved == null || !_vulnerabilityMitigationRemoved.GetInvocationList().Contains(args.Handler))
            {
                _vulnerabilityMitigationRemoved += (Action<IVulnerabilityMitigationsContainer, IVulnerabilityMitigation>)args.Handler;
                args.ProceedAddHandler();
            }
        }

        [OnEventRemoveHandlerAdvice(Master = nameof(OnVulnerabilityMitigationRemovedAdd))]
        public void OnVulnerabilityMitigationRemovedRemove(EventInterceptionArgs args)
        {
            _vulnerabilityMitigationRemoved -= (Action<IVulnerabilityMitigationsContainer, IVulnerabilityMitigation>)args.Handler;
            args.ProceedRemoveHandler();
        }

        [IntroduceMember(OverrideAction = MemberOverrideAction.OverrideOrFail, LinesOfCodeAvoided = 1)]
        public IEnumerable<IVulnerabilityMitigation> Mitigations => _mitigations?.Get()?
            .Where(x => x.Mitigation != null).AsEnumerable();

        [IntroduceMember(OverrideAction = MemberOverrideAction.OverrideOrFail, LinesOfCodeAvoided = 1)]
        public IVulnerabilityMitigation GetMitigation(Guid mitigationId)
        {
            return _mitigations?.Get()?.FirstOrDefault(x => x.MitigationId == mitigationId);
        }

        [IntroduceMember(OverrideAction = MemberOverrideAction.OverrideOrFail, LinesOfCodeAvoided = 11)]
        public void Add(IVulnerabilityMitigation mitigation)
        {
            if (mitigation is VulnerabilityMitigation vm)
            {
                if (vm.Mitigation is IThreatModelChild child && child.Model != (Instance as IThreatModelChild)?.Model)
                    throw new ArgumentException();

                using (var scope = UndoRedoManager.OpenScope("Add a Mitigation to a Vulnerability"))
                {
                    var mitigations = _mitigations?.Get();
                    if (mitigations == null)
                    {
                        mitigations = new AdvisableCollection<VulnerabilityMitigation>();
                        _mitigations?.Set(mitigations);
                    }

                    UndoRedoManager.Attach(vm, vm.Model);
                    mitigations.Add(vm);
                    scope?.Complete();
                }

                if (Instance is IVulnerabilityMitigationsContainer container)
                {
                    _vulnerabilityMitigationAdded?.Invoke(container, vm);
                }
            }
            else
                throw new ArgumentNullException(nameof(mitigation));
        }

        [IntroduceMember(OverrideAction = MemberOverrideAction.OverrideOrFail, LinesOfCodeAvoided = 10)]
        public IVulnerabilityMitigation AddMitigation(IMitigation mitigation, IStrength strength, 
            MitigationStatus status = MitigationStatus.Proposed, string directives = null)
        {
            if (mitigation == null)
                throw new ArgumentNullException(nameof(mitigation));

            IVulnerabilityMitigation result = null;

            if (GetMitigation(mitigation.Id) == null && Instance is IVulnerability vulnerability)
            {
                result = new VulnerabilityMitigation(vulnerability, mitigation, strength)
                {
                    Status = status, Directives = directives
                };
                Add(result);
             }

            return result;
        }

        [IntroduceMember(OverrideAction = MemberOverrideAction.OverrideOrFail, LinesOfCodeAvoided = 10)]
        public bool RemoveMitigation(Guid mitigationId)
        {
            bool result = false;

            var mitigation = GetMitigation(mitigationId) as VulnerabilityMitigation;
            if (mitigation != null)
            {
                using (var scope = UndoRedoManager.OpenScope("Remove a Mitigation from a Vulnerability"))
                {
                    result = _mitigations?.Get()?.Remove(mitigation) ?? false;
                    if (result)
                    {
                        UndoRedoManager.Detach(mitigation);
                        scope?.Complete();
                    }
                }

                if (result && Instance is IVulnerabilityMitigationsContainer container)
                    _vulnerabilityMitigationRemoved?.Invoke(container, mitigation);
            }

            return result;
        }
        #endregion
    }
}