//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tmt.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ThreatsManager.MsTmt.Model.AutoThreatGen {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class TmtLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PROPERTY=1, FLOW=2, SOURCE=3, TARGET=4, IS=5, CROSSES=6, AND=7, OR=8, 
		NOT=9, LPAREN=10, RPAREN=11, CHARACTER=12, CHARACTER_POINT=13, TEXT=14, 
		WHITESPACE=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"PROPERTY", "UPPERLETTER", "LOWERLETTER", "DIGIT", "A", "B", "C", "D", 
		"E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", 
		"S", "T", "U", "V", "W", "X", "Y", "Z", "FLOW", "SOURCE", "TARGET", "IS", 
		"CROSSES", "AND", "OR", "NOT", "LPAREN", "RPAREN", "CHARACTER", "CHARACTER_POINT", 
		"TEXT", "WHITESPACE"
	};


	public TmtLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TmtLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PROPERTY", "FLOW", "SOURCE", "TARGET", "IS", "CROSSES", "AND", 
		"OR", "NOT", "LPAREN", "RPAREN", "CHARACTER", "CHARACTER_POINT", "TEXT", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tmt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TmtLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,15,224,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,1,0,1,0,4,0,92,8,0,11,0,12,0,93,1,1,1,1,1,2,1,2,1,3,1,3,
		1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
		12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,
		19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,
		26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,
		31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,
		33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,
		36,1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,
		40,3,40,203,8,40,1,41,1,41,3,41,207,8,41,1,42,1,42,5,42,211,8,42,10,42,
		12,42,214,9,42,1,42,1,42,1,43,4,43,219,8,43,11,43,12,43,220,1,43,1,43,
		0,0,44,1,1,3,0,5,0,7,0,9,0,11,0,13,0,15,0,17,0,19,0,21,0,23,0,25,0,27,
		0,29,0,31,0,33,0,35,0,37,0,39,0,41,0,43,0,45,0,47,0,49,0,51,0,53,0,55,
		0,57,0,59,0,61,2,63,3,65,4,67,5,69,6,71,7,73,8,75,9,77,10,79,11,81,12,
		83,13,85,14,87,15,1,0,31,1,0,65,90,1,0,97,122,1,0,48,57,2,0,65,65,97,97,
		2,0,66,66,98,98,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,
		0,70,70,102,102,2,0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,
		2,0,74,74,106,106,2,0,75,75,107,107,2,0,76,76,108,108,2,0,77,77,109,109,
		2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,80,112,112,2,0,81,81,113,113,
		2,0,82,82,114,114,2,0,83,83,115,115,2,0,84,84,116,116,2,0,85,85,117,117,
		2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,2,0,89,89,121,121,
		2,0,90,90,122,122,1,0,39,39,2,0,9,9,32,32,201,0,1,1,0,0,0,0,61,1,0,0,0,
		0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
		1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
		0,0,85,1,0,0,0,0,87,1,0,0,0,1,89,1,0,0,0,3,95,1,0,0,0,5,97,1,0,0,0,7,99,
		1,0,0,0,9,101,1,0,0,0,11,103,1,0,0,0,13,105,1,0,0,0,15,107,1,0,0,0,17,
		109,1,0,0,0,19,111,1,0,0,0,21,113,1,0,0,0,23,115,1,0,0,0,25,117,1,0,0,
		0,27,119,1,0,0,0,29,121,1,0,0,0,31,123,1,0,0,0,33,125,1,0,0,0,35,127,1,
		0,0,0,37,129,1,0,0,0,39,131,1,0,0,0,41,133,1,0,0,0,43,135,1,0,0,0,45,137,
		1,0,0,0,47,139,1,0,0,0,49,141,1,0,0,0,51,143,1,0,0,0,53,145,1,0,0,0,55,
		147,1,0,0,0,57,149,1,0,0,0,59,151,1,0,0,0,61,153,1,0,0,0,63,158,1,0,0,
		0,65,165,1,0,0,0,67,172,1,0,0,0,69,175,1,0,0,0,71,183,1,0,0,0,73,187,1,
		0,0,0,75,190,1,0,0,0,77,194,1,0,0,0,79,196,1,0,0,0,81,202,1,0,0,0,83,206,
		1,0,0,0,85,208,1,0,0,0,87,218,1,0,0,0,89,91,5,46,0,0,90,92,3,83,41,0,91,
		90,1,0,0,0,92,93,1,0,0,0,93,91,1,0,0,0,93,94,1,0,0,0,94,2,1,0,0,0,95,96,
		7,0,0,0,96,4,1,0,0,0,97,98,7,1,0,0,98,6,1,0,0,0,99,100,7,2,0,0,100,8,1,
		0,0,0,101,102,7,3,0,0,102,10,1,0,0,0,103,104,7,4,0,0,104,12,1,0,0,0,105,
		106,7,5,0,0,106,14,1,0,0,0,107,108,7,6,0,0,108,16,1,0,0,0,109,110,7,7,
		0,0,110,18,1,0,0,0,111,112,7,8,0,0,112,20,1,0,0,0,113,114,7,9,0,0,114,
		22,1,0,0,0,115,116,7,10,0,0,116,24,1,0,0,0,117,118,7,11,0,0,118,26,1,0,
		0,0,119,120,7,12,0,0,120,28,1,0,0,0,121,122,7,13,0,0,122,30,1,0,0,0,123,
		124,7,14,0,0,124,32,1,0,0,0,125,126,7,15,0,0,126,34,1,0,0,0,127,128,7,
		16,0,0,128,36,1,0,0,0,129,130,7,17,0,0,130,38,1,0,0,0,131,132,7,18,0,0,
		132,40,1,0,0,0,133,134,7,19,0,0,134,42,1,0,0,0,135,136,7,20,0,0,136,44,
		1,0,0,0,137,138,7,21,0,0,138,46,1,0,0,0,139,140,7,22,0,0,140,48,1,0,0,
		0,141,142,7,23,0,0,142,50,1,0,0,0,143,144,7,24,0,0,144,52,1,0,0,0,145,
		146,7,25,0,0,146,54,1,0,0,0,147,148,7,26,0,0,148,56,1,0,0,0,149,150,7,
		27,0,0,150,58,1,0,0,0,151,152,7,28,0,0,152,60,1,0,0,0,153,154,3,19,9,0,
		154,155,3,31,15,0,155,156,3,37,18,0,156,157,3,53,26,0,157,62,1,0,0,0,158,
		159,3,45,22,0,159,160,3,37,18,0,160,161,3,49,24,0,161,162,3,43,21,0,162,
		163,3,13,6,0,163,164,3,17,8,0,164,64,1,0,0,0,165,166,3,47,23,0,166,167,
		3,9,4,0,167,168,3,43,21,0,168,169,3,21,10,0,169,170,3,17,8,0,170,171,3,
		47,23,0,171,66,1,0,0,0,172,173,3,25,12,0,173,174,3,45,22,0,174,68,1,0,
		0,0,175,176,3,13,6,0,176,177,3,43,21,0,177,178,3,37,18,0,178,179,3,45,
		22,0,179,180,3,45,22,0,180,181,3,17,8,0,181,182,3,45,22,0,182,70,1,0,0,
		0,183,184,3,9,4,0,184,185,3,35,17,0,185,186,3,15,7,0,186,72,1,0,0,0,187,
		188,3,37,18,0,188,189,3,43,21,0,189,74,1,0,0,0,190,191,3,35,17,0,191,192,
		3,37,18,0,192,193,3,47,23,0,193,76,1,0,0,0,194,195,5,40,0,0,195,78,1,0,
		0,0,196,197,5,41,0,0,197,80,1,0,0,0,198,203,3,3,1,0,199,203,3,5,2,0,200,
		203,3,7,3,0,201,203,5,45,0,0,202,198,1,0,0,0,202,199,1,0,0,0,202,200,1,
		0,0,0,202,201,1,0,0,0,203,82,1,0,0,0,204,207,3,81,40,0,205,207,5,46,0,
		0,206,204,1,0,0,0,206,205,1,0,0,0,207,84,1,0,0,0,208,212,5,39,0,0,209,
		211,8,29,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,
		0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,5,39,0,0,216,86,1,0,0,0,
		217,219,7,30,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,221,
		1,0,0,0,221,222,1,0,0,0,222,223,6,43,0,0,223,88,1,0,0,0,6,0,93,202,206,
		212,220,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ThreatsManager.MsTmt.Model.AutoThreatGen
