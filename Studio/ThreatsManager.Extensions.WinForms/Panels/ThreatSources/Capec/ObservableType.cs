// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.44
//  </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Xml.Serialization;

#pragma warning disable
namespace ThreatsManager.Extensions.Panels.ThreatSources.Capec
{
    /// <summary>
/// The ObservableType is a type representing a description of a single cyber observable.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://cybox.mitre.org/cybox-2")]
public partial class ObservableType
{
    #region Private fields
    private string _title;
    private StructuredTextType _description;
    private List<string> _keywords;
    private List<MeasureSourceType> _observable_Source;
    private object _item;
    private PatternFidelityType _pattern_Fidelity;
    private System.Xml.XmlQualifiedName _id;
    private System.Xml.XmlQualifiedName _idref;
    private bool _negate;
    private string _sighting_count;
    #endregion
    
    /// <summary>
    /// ObservableType class constructor
    /// </summary>
    public ObservableType()
    {
        _pattern_Fidelity = new PatternFidelityType();
        _observable_Source = new List<MeasureSourceType>();
        _keywords = new List<string>();
        _description = new StructuredTextType();
        _negate = false;
    }
    
    /// <summary>
    /// The Title field provides a mechanism to specify a short title or description for this Observable.
    /// </summary>
    public string Title
    {
        get => _title;
        set => _title = value;
    }
    
    /// <summary>
    /// The Description field provides a mechanism to specify a structured text description of this Observable.
    /// </summary>
    public StructuredTextType Description
    {
        get => _description;
        set => _description = value;
    }
    
    /// <summary>
    /// Keywords enables capture of relevant keywords for this cyber observable.
    /// </summary>
    [XmlArrayItem("Keyword", IsNullable=false)]
    public List<string> Keywords
    {
        get => _keywords;
        set => _keywords = value;
    }
    
    /// <summary>
    /// The Observable_Source field is optional and enables descriptive specification of how this Observable was identified and specified.
    /// </summary>
    [XmlElement("Observable_Source")]
    public List<MeasureSourceType> Observable_Source
    {
        get => _observable_Source;
        set => _observable_Source = value;
    }
    
    [XmlElement("Event", typeof(EventType))]
    [XmlElement("Object", typeof(ObjectType))]
    [XmlElement("Observable_Composition", typeof(ObservableCompositionType))]
    public object Item
    {
        get => _item;
        set => _item = value;
    }
    
    /// <summary>
    /// Pattern_Fidelity contains elements that enable the characterization of the fidelity of this pattern to its purpose.
    /// </summary>
    public PatternFidelityType Pattern_Fidelity
    {
        get => _pattern_Fidelity;
        set => _pattern_Fidelity = value;
    }
    
    /// <summary>
    /// The id field specifies a unique id for this Observable.
    /// </summary>
    [XmlAttribute]
    public System.Xml.XmlQualifiedName id
    {
        get => _id;
        set => _id = value;
    }
    
    /// <summary>
    /// The idref field specifies a unique id reference to an Observable defined elsewhere.
    /// </summary>
    /// <summary>
    /// When idref is specified, the id attribute must not be specified, and any instance of this Observable should not hold content unless an extension of the Observable allows it.
    /// </summary>
    [XmlAttribute]
    public System.Xml.XmlQualifiedName idref
    {
        get => _idref;
        set => _idref = value;
    }
    
    /// <summary>
    /// The negate field, when set to true, indicates the absence (rather than the presence) of the given Observable in a CybOX pattern.
    /// </summary>
    [XmlAttribute]
    [DefaultValue(false)]
    public bool negate
    {
        get => _negate;
        set => _negate = value;
    }
    
    /// <summary>
    /// The sighting_count field specifies how many different identical instances of the Observable may have been seen/sighted.
    /// </summary>
    [XmlAttribute(DataType="positiveInteger")]
    public string sighting_count
    {
        get => _sighting_count;
        set => _sighting_count = value;
    }
}
}
#pragma warning restore
