// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.2.97.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace ThreatsManager.Mitre.Cwe
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.Collections.Generic;

/// <summary>
/// A weakness is a mistake or condition that, if left unaddressed, could under the proper conditions contribute to a cyber-enabled capability being vulnerable to attack, allowing an adversary to make items function in unintended ways. This complexType is used to describe a specific type of weakness and provide a variety of information related to it.
/// </summary>
/// <summary>
/// The required Description should be short and limited to the key points that define this weakness. The optional Extended_Description element provides a place for additional details important to this weakness, but that are not necessary to convey the fundamental concept behind the weakness. A number of other optional elements are available, each of which is described in more detail within the corresponding complexType that it references.
/// </summary>
/// <summary>
/// The required ID attribute provides a unique identifier for the entry. It is considered static for the lifetime of the entry. If this entry becomes deprecated, the identifier will not be reused. The required Name attribute is a string that identifies the entry. The name should focus on the weakness being described and should avoid mentioning the attack that exploits the weakness or the consequences of exploiting the weakness. All words in the entry name should be capitalized except for articles and prepositions, unless they begin or end the name. Subsequent words in a hyphenated chain are also not capitalized. The required Abstraction attribute defines the abstraction level for this weakness. The required Structure attribute defines the structural nature of the weakness. The required Status attribute defines the maturity of the information for this weakness.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
[Serializable]
[DebuggerStepThrough]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[XmlTypeAttribute(Namespace="http://cwe.mitre.org/cwe-6")]
public partial class WeaknessType
{
    private static XmlSerializer _serializer;
    
        public string Description { get; set; }
        public StructuredTextType Extended_Description { get; set; }
        [XmlArrayItemAttribute("Related_Weakness", IsNullable=false)]
        public List<RelatedWeaknessesTypeRelated_Weakness> Related_Weaknesses { get; set; }
        [XmlArrayItemAttribute("Weakness_Ordinality", IsNullable=false)]
        public List<WeaknessOrdinalitiesTypeWeakness_Ordinality> Weakness_Ordinalities { get; set; }
        public ApplicablePlatformsType Applicable_Platforms { get; set; }
        [XmlArrayItemAttribute("Background_Detail", IsNullable=false)]
        public List<StructuredTextType> Background_Details { get; set; }
        [XmlArrayItemAttribute("Alternate_Term", IsNullable=false)]
        public List<AlternateTermsTypeAlternate_Term> Alternate_Terms { get; set; }
        [XmlArrayItemAttribute("Introduction", IsNullable=false)]
        public List<ModesOfIntroductionTypeIntroduction> Modes_Of_Introduction { get; set; }
        [XmlArrayItemAttribute("Exploitation_Factor", IsNullable=false)]
        public List<StructuredTextType> Exploitation_Factors { get; set; }
        public LikelihoodEnumeration Likelihood_Of_Exploit { get; set; }
        [XmlArrayItemAttribute("Consequence", IsNullable=false)]
        public List<CommonConsequencesTypeConsequence> Common_Consequences { get; set; }
        [XmlArrayItemAttribute("Detection_Method", IsNullable=false)]
        public List<DetectionMethodsTypeDetection_Method> Detection_Methods { get; set; }
        [XmlArrayItemAttribute("Mitigation", IsNullable=false)]
        public List<PotentialMitigationsTypeMitigation> Potential_Mitigations { get; set; }
        [XmlArrayItemAttribute("Demonstrative_Example", IsNullable=false)]
        public List<DemonstrativeExamplesTypeDemonstrative_Example> Demonstrative_Examples { get; set; }
        [XmlArrayItemAttribute("Observed_Example", IsNullable=false)]
        public List<ObservedExampleTypeObserved_Example> Observed_Examples { get; set; }
        [XmlArrayItemAttribute("Functional_Area", IsNullable=false)]
        public List<FunctionalAreaEnumeration> Functional_Areas { get; set; }
        [XmlArrayItemAttribute("Affected_Resource", IsNullable=false)]
        public List<ResourceEnumeration> Affected_Resources { get; set; }
        [XmlArrayItemAttribute("Taxonomy_Mapping", IsNullable=false)]
        public List<TaxonomyMappingsTypeTaxonomy_Mapping> Taxonomy_Mappings { get; set; }
        [XmlArrayItemAttribute("Related_Attack_Pattern", IsNullable=false)]
        public List<RelatedAttackPatternsTypeRelated_Attack_Pattern> Related_Attack_Patterns { get; set; }
        [XmlArrayItemAttribute("Reference", IsNullable=false)]
        public List<ReferencesTypeReference> References { get; set; }
        [XmlArrayItemAttribute("Note", IsNullable=false)]
        public List<NotesTypeNote> Notes { get; set; }
        public ContentHistoryType Content_History { get; set; }
        [XmlAttribute(DataType="integer")]
        public string ID { get; set; }
        [XmlAttribute]
        public string Name { get; set; }
        [XmlAttribute]
        public AbstractionEnumeration Abstraction { get; set; }
        [XmlAttribute]
        public StructureEnumeration Structure { get; set; }
        [XmlAttribute]
        public StatusEnumeration Status { get; set; }
    
    /// <summary>
    /// WeaknessType class constructor
    /// </summary>
    public WeaknessType()
    {
        Content_History = new ContentHistoryType();
        Notes = new List<NotesTypeNote>();
        References = new List<ReferencesTypeReference>();
        Related_Attack_Patterns = new List<RelatedAttackPatternsTypeRelated_Attack_Pattern>();
        Taxonomy_Mappings = new List<TaxonomyMappingsTypeTaxonomy_Mapping>();
        Affected_Resources = new List<ResourceEnumeration>();
        Functional_Areas = new List<FunctionalAreaEnumeration>();
        Observed_Examples = new List<ObservedExampleTypeObserved_Example>();
        Demonstrative_Examples = new List<DemonstrativeExamplesTypeDemonstrative_Example>();
        Potential_Mitigations = new List<PotentialMitigationsTypeMitigation>();
        Detection_Methods = new List<DetectionMethodsTypeDetection_Method>();
        Common_Consequences = new List<CommonConsequencesTypeConsequence>();
        Exploitation_Factors = new List<StructuredTextType>();
        Modes_Of_Introduction = new List<ModesOfIntroductionTypeIntroduction>();
        Alternate_Terms = new List<AlternateTermsTypeAlternate_Term>();
        Background_Details = new List<StructuredTextType>();
        Applicable_Platforms = new ApplicablePlatformsType();
        Weakness_Ordinalities = new List<WeaknessOrdinalitiesTypeWeakness_Ordinality>();
        Related_Weaknesses = new List<RelatedWeaknessesTypeRelated_Weakness>();
        Extended_Description = new StructuredTextType();
    }
    
    private static XmlSerializer SerializerXML
    {
        get
        {
            if ((_serializer == null))
            {
                _serializer = new XmlSerializerFactory().CreateSerializer(typeof(WeaknessType));
            }
            return _serializer;
        }
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serialize WeaknessType object
    /// </summary>
    /// <returns>XML value</returns>
    public virtual string Serialize()
    {
        StreamReader streamReader = null;
        MemoryStream memoryStream = null;
        try
        {
            memoryStream = new MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            SerializerXML.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes WeaknessType object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output WeaknessType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out WeaknessType obj, out Exception exception)
    {
        exception = null;
        obj = default(WeaknessType);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out WeaknessType obj)
    {
        Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public static WeaknessType Deserialize(string input)
    {
        StringReader stringReader = null;
        try
        {
            stringReader = new StringReader(input);
            return ((WeaknessType)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static WeaknessType Deserialize(Stream s)
    {
        return ((WeaknessType)(SerializerXML.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current WeaknessType object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        StreamWriter streamWriter = null;
        try
        {
            string dataString = Serialize();
            FileInfo outputFile = new FileInfo(fileName);
            streamWriter = outputFile.CreateText();
            streamWriter.WriteLine(dataString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an WeaknessType object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output WeaknessType object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out WeaknessType obj, out Exception exception)
    {
        exception = null;
        obj = default(WeaknessType);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out WeaknessType obj)
    {
        Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static WeaknessType LoadFromFile(string fileName)
    {
        FileStream file = null;
        StreamReader sr = null;
        try
        {
            file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new StreamReader(file);
            string dataString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(dataString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
