// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.44
//  </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Xml.Serialization;

#pragma warning disable
namespace ThreatsManager.Extensions.Panels.ThreatSources.Capec
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://capec.mitre.org/capec-2")]
[XmlRoot("Attack_Pattern", Namespace="http://capec.mitre.org/capec-2", IsNullable=false)]
public partial class Attack_PatternType
{
    #region Private fields
    private Attack_PatternTypeDescription _description;
    private List<Alternate_TermsAlternate_Term> _alternate_Terms;
    private Target_Attack_SurfaceType _target_Attack_Surface;
    private List<Structured_Text_Type> _attack_Prerequisites;
    private Attack_PatternTypeTypical_Severity _typical_Severity;
    private Attack_PatternTypeTypical_Likelihood_of_Exploit _typical_Likelihood_of_Exploit;
    private List<Attack_PatternTypeMethod_of_Attack> _methods_of_Attack;
    private List<Attack_PatternTypeExampleInstance> _examplesInstances;
    private List<Attack_PatternTypeAttacker_Skill_or_Knowledge_Required> _attacker_Skills_or_Knowledge_Required;
    private Structured_Text_Type _resources_Required;
    private List<Attack_PatternTypeProbing_Technique> _probing_Techniques;
    private List<Attack_PatternTypeIndicatorWarning_of_Attack> _indicatorsWarnings_of_Attack;
    private List<Attack_PatternTypeObfuscation_Technique> _obfuscation_Techniques;
    private List<Structured_Text_Type> _solutions_and_Mitigations;
    private List<Common_ConsequenceType> _attack_MotivationConsequences;
    private Structured_Text_Type _injection_Vector;
    private Structured_Text_Type _payload;
    private Structured_Text_Type _activation_Zone;
    private Attack_PatternTypePayload_Activation_Impact _payload_Activation_Impact;
    private List<Attack_PatternTypeRelated_Weakness> _related_Weaknesses;
    private List<Attack_PatternTypeRelated_Vulnerability> _related_Vulnerabilities;
    private List<RelationshipType> _related_Attack_Patterns;
    private List<Structured_Text_Type> _relevant_Security_Requirements;
    private Attack_PatternTypeRelevant_Design_Patterns _relevant_Design_Patterns;
    private List<Structured_Text_Type> _relevant_Security_Patterns;
    private List<Structured_Text_Type> _related_Security_Principles;
    private List<Structured_Text_Type> _related_Guidelines;
    private List<Attack_PatternTypePurpose> _purposes;
    private Attack_PatternTypeCIA_Impact _cIA_Impact;
    private Attack_PatternTypeTechnical_Context _technical_Context;
    private List<string> _keywords;
    private List<Reference_Type> _references;
    private List<Structured_Text_Type> _other_Notes;
    private List<Structured_Text_Type> _maintenance_Notes;
    private Content_History _content_History;
    private string _id;
    private string _name;
    private Attack_PatternTypePattern_Completeness _pattern_Completeness;
    private Attack_PatternTypePattern_Abstraction _pattern_Abstraction;
    private Status_Type _status;
    #endregion
    
    /// <summary>
    /// Attack_PatternType class constructor
    /// </summary>
    public Attack_PatternType()
    {
        _content_History = new Content_History();
        _maintenance_Notes = new List<Structured_Text_Type>();
        _other_Notes = new List<Structured_Text_Type>();
        _references = new List<Reference_Type>();
        _keywords = new List<string>();
        _technical_Context = new Attack_PatternTypeTechnical_Context();
        _cIA_Impact = new Attack_PatternTypeCIA_Impact();
        _purposes = new List<Attack_PatternTypePurpose>();
        _related_Guidelines = new List<Structured_Text_Type>();
        _related_Security_Principles = new List<Structured_Text_Type>();
        _relevant_Security_Patterns = new List<Structured_Text_Type>();
        _relevant_Design_Patterns = new Attack_PatternTypeRelevant_Design_Patterns();
        _relevant_Security_Requirements = new List<Structured_Text_Type>();
        _related_Attack_Patterns = new List<RelationshipType>();
        _related_Vulnerabilities = new List<Attack_PatternTypeRelated_Vulnerability>();
        _related_Weaknesses = new List<Attack_PatternTypeRelated_Weakness>();
        _payload_Activation_Impact = new Attack_PatternTypePayload_Activation_Impact();
        _activation_Zone = new Structured_Text_Type();
        _payload = new Structured_Text_Type();
        _injection_Vector = new Structured_Text_Type();
        _attack_MotivationConsequences = new List<Common_ConsequenceType>();
        _solutions_and_Mitigations = new List<Structured_Text_Type>();
        _obfuscation_Techniques = new List<Attack_PatternTypeObfuscation_Technique>();
        _indicatorsWarnings_of_Attack = new List<Attack_PatternTypeIndicatorWarning_of_Attack>();
        _probing_Techniques = new List<Attack_PatternTypeProbing_Technique>();
        _resources_Required = new Structured_Text_Type();
        _attacker_Skills_or_Knowledge_Required = new List<Attack_PatternTypeAttacker_Skill_or_Knowledge_Required>();
        _examplesInstances = new List<Attack_PatternTypeExampleInstance>();
        _methods_of_Attack = new List<Attack_PatternTypeMethod_of_Attack>();
        _typical_Likelihood_of_Exploit = new Attack_PatternTypeTypical_Likelihood_of_Exploit();
        _attack_Prerequisites = new List<Structured_Text_Type>();
        _target_Attack_Surface = new Target_Attack_SurfaceType();
        _alternate_Terms = new List<Alternate_TermsAlternate_Term>();
        _description = new Attack_PatternTypeDescription();
        _id = "0";
    }
    
    /// <summary>
    /// This element represents a detailed description of an attack pattern. Content may include a summary and a list of steps taken by the attacker. USAGE: This element can be used to capture a range of descriptive information. Comprehensive descriptions might include attack trees, exploit graphs, etc., to more clearly elaborate this type of attack.
    /// </summary>
    public Attack_PatternTypeDescription Description
    {
        get => _description;
        set => _description = value;
    }
    
    /// <summary>
    /// This element contains one or more alternative terms used to identify the attack pattern.
    /// </summary>
    [XmlArrayItem("Alternate_Term", IsNullable=false)]
    public List<Alternate_TermsAlternate_Term> Alternate_Terms
    {
        get => _alternate_Terms;
        set => _alternate_Terms = value;
    }
    
    /// <summary>
    /// This element characterizes the locations where an attacker interacts with the target system.
    /// </summary>
    public Target_Attack_SurfaceType Target_Attack_Surface
    {
        get => _target_Attack_Surface;
        set => _target_Attack_Surface = value;
    }
    
    /// <summary>
    /// An attack prerequisite is a condition that must exist in order for an attack of this type to succeed.
    /// </summary>
    [XmlArrayItem("Attack_Prerequisite", IsNullable=false)]
    public List<Structured_Text_Type> Attack_Prerequisites
    {
        get => _attack_Prerequisites;
        set => _attack_Prerequisites = value;
    }
    
    /// <summary>
    /// This element reflect the typical severity of an attack on a scale of {Very Low, Low, Medium, High, Very High}. USAGE: This element is used to capture an overall typical average value for this type of attack with the understanding that it will not be completely accurate for all attacks.
    /// </summary>
    public Attack_PatternTypeTypical_Severity Typical_Severity
    {
        get => _typical_Severity;
        set => _typical_Severity = value;
    }
    
    /// <summary>
    /// This element represents the typical likelihood that the attack will succeed, and provides a likelihood estimate and an explanation that qualifies the estimate. USAGE: This element is used to capture an overall typical average value for this type of attack with the understanding that it will not be completely accurate for all attacks.
    /// </summary>
    public Attack_PatternTypeTypical_Likelihood_of_Exploit Typical_Likelihood_of_Exploit
    {
        get => _typical_Likelihood_of_Exploit;
        set => _typical_Likelihood_of_Exploit = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more methods of attack. Method of attack is enumerated list of defined vectors that identify the underlying mechanism(s) used in the attack.
    /// </summary>
    [XmlArrayItem("Method_of_Attack", IsNullable=false)]
    public List<Attack_PatternTypeMethod_of_Attack> Methods_of_Attack
    {
        get => _methods_of_Attack;
        set => _methods_of_Attack = value;
    }
    
    [XmlArray("Examples-Instances")]
    [XmlArrayItem("Example-Instance", IsNullable=false)]
    public List<Attack_PatternTypeExampleInstance> ExamplesInstances
    {
        get => _examplesInstances;
        set => _examplesInstances = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more attacker skill or knowledge required. Attacker skill or knowledge required describes the level of skills or specific knowledge needed by an attacker to execute this type of attack.
    /// </summary>
    [XmlArrayItem("Attacker_Skill_or_Knowledge_Required", IsNullable=false)]
    public List<Attack_PatternTypeAttacker_Skill_or_Knowledge_Required> Attacker_Skills_or_Knowledge_Required
    {
        get => _attacker_Skills_or_Knowledge_Required;
        set => _attacker_Skills_or_Knowledge_Required = value;
    }
    
    /// <summary>
    /// This element describes the resources (CPU cycles, IP addresses, tools, etc.) required by an attacker to effectively execute this type of attack.
    /// </summary>
    public Structured_Text_Type Resources_Required
    {
        get => _resources_Required;
        set => _resources_Required = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more probing techniques. A probing technique describes a method used to probe and reconnoiter a potential target to determine vulnerability and/or to prepare for this type of attack.
    /// </summary>
    [XmlArrayItem("Probing_Technique", IsNullable=false)]
    public List<Attack_PatternTypeProbing_Technique> Probing_Techniques
    {
        get => _probing_Techniques;
        set => _probing_Techniques = value;
    }
    
    [XmlArray("Indicators-Warnings_of_Attack")]
    [XmlArrayItem("Indicator-Warning_of_Attack", IsNullable=false)]
    public List<Attack_PatternTypeIndicatorWarning_of_Attack> IndicatorsWarnings_of_Attack
    {
        get => _indicatorsWarnings_of_Attack;
        set => _indicatorsWarnings_of_Attack = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more obfuscation techniques. An obfuscation technique can be used to disguise the fact that an attack of this type is imminent, in progress or has occurred.
    /// </summary>
    [XmlArrayItem("Obfuscation_Technique", IsNullable=false)]
    public List<Attack_PatternTypeObfuscation_Technique> Obfuscation_Techniques
    {
        get => _obfuscation_Techniques;
        set => _obfuscation_Techniques = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more solutions or mitigations. A solution or mitigation describes actions or approaches to prevent or mitigate the risk of this attack by improving the resilience of the target system, reduce its attack surface or to reduce the impact of the attack if it is successful.
    /// </summary>
    [XmlArrayItem("Solution_or_Mitigation", IsNullable=false)]
    public List<Structured_Text_Type> Solutions_and_Mitigations
    {
        get => _solutions_and_Mitigations;
        set => _solutions_and_Mitigations = value;
    }
    
    [XmlArray("Attack_Motivation-Consequences")]
    [XmlArrayItem("Attack_Motivation-Consequence", IsNullable=false)]
    public List<Common_ConsequenceType> Attack_MotivationConsequences
    {
        get => _attack_MotivationConsequences;
        set => _attack_MotivationConsequences = value;
    }
    
    /// <summary>
    /// This element details the mechanism and format of an input-driven attack of this type. Injection vectors take into account the grammar of an attack, the syntax accepted by the system, the position of various fields, and the ranges of data that are acceptable.
    /// </summary>
    public Structured_Text_Type Injection_Vector
    {
        get => _injection_Vector;
        set => _injection_Vector = value;
    }
    
    /// <summary>
    /// This element describes the code, configuration or other data to be executed or otherwise activated as part of an injection-based attack of this type.
    /// </summary>
    public Structured_Text_Type Payload
    {
        get => _payload;
        set => _payload = value;
    }
    
    /// <summary>
    /// This element describes the area within the target software that is capable of executing or otherwise activating the payload of an injection-based attack of this type. The activation zone is where the intent of the attacker is put into action. The activation zone may be a command interpreter, some active machine code in a buffer, a client browser, a system API call, etc.
    /// </summary>
    public Structured_Text_Type Activation_Zone
    {
        get => _activation_Zone;
        set => _activation_Zone = value;
    }
    
    /// <summary>
    /// This element describes the impact that the activation of the attack payload for an injection-based attack of this type would typically have on the confidentiality, integrity or availability of the target software.
    /// </summary>
    public Attack_PatternTypePayload_Activation_Impact Payload_Activation_Impact
    {
        get => _payload_Activation_Impact;
        set => _payload_Activation_Impact = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more related weaknesses. Related weaknesses refer to software weaknesses potentially targeted for exploit by this attack pattern. USAGE: This element is used to reference industry standard Common Weakness Enumeration (CWE) data, including weaknesses that are exploited by the attack as well as weaknesses whose presence increases the likelihood or impact of the attack.
    /// </summary>
    [XmlArrayItem("Related_Weakness", IsNullable=false)]
    public List<Attack_PatternTypeRelated_Weakness> Related_Weaknesses
    {
        get => _related_Weaknesses;
        set => _related_Weaknesses = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more related vulnerabilities. A related vulnerability refers to a specific instance vulnerability targeted for exploit by this attack pattern. USAGE: This element is used to identify specific vulnerabilities by their industry-standard Common Vulnerabilities and Exposures (CVE) numbers and/or US-CERT numbers. As vulnerabilities are much more specific and localized than weaknesses, it is uncommon that an attack pattern would target a specific vulnerability. This would most likely occur if the attack pattern were targeting vulnerabilities in the underlying platform, framework, or software library.
    /// </summary>
    [XmlArrayItem("Related_Vulnerability", IsNullable=false)]
    public List<Attack_PatternTypeRelated_Vulnerability> Related_Vulnerabilities
    {
        get => _related_Vulnerabilities;
        set => _related_Vulnerabilities = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more related attack patterns. A related attack pattern refers to an attack pattern that is dependent on or applied in conjunction with this attack pattern.
    /// </summary>
    [XmlArrayItem("Related_Attack_Pattern", IsNullable=false)]
    public List<RelationshipType> Related_Attack_Patterns
    {
        get => _related_Attack_Patterns;
        set => _related_Attack_Patterns = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more relevant security requirements. A relevant security requirement is a general security requirement that is relevant to this type of attack.
    /// </summary>
    [XmlArrayItem("Relevant_Security_Requirement", IsNullable=false)]
    public List<Structured_Text_Type> Relevant_Security_Requirements
    {
        get => _relevant_Security_Requirements;
        set => _relevant_Security_Requirements = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more relevant design patterns. Relevant design patterns include both recommended design patterns, which increase the software's resistance or resilience to this type of attack, and non-recommended design patterns, which could leave the system especially susceptible to this type of attack.
    /// </summary>
    public Attack_PatternTypeRelevant_Design_Patterns Relevant_Design_Patterns
    {
        get => _relevant_Design_Patterns;
        set => _relevant_Design_Patterns = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more relevant security patterns. A relevant security pattern provides resistance or resilience to this type of attack.
    /// </summary>
    [XmlArrayItem("Relevant_Security_Pattern", IsNullable=false)]
    public List<Structured_Text_Type> Relevant_Security_Patterns
    {
        get => _relevant_Security_Patterns;
        set => _relevant_Security_Patterns = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more related security principles. A principle is defined as a rule or standard for good behavior. A related security principle is a security rule or practice that impedes this attack pattern. USAGE: Usage defined in NIST SP 800-27A, "Engineering Principles for Information Technology Security", Revision A.
    /// </summary>
    [XmlArrayItem("Related_Security_Principle", IsNullable=false)]
    public List<Structured_Text_Type> Related_Security_Principles
    {
        get => _related_Security_Principles;
        set => _related_Security_Principles = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more related guidelines. A related guideline represents a security guideline that is relevant to identifying or mitigating this type of attack. USAGE: It would be helpful to provide a usage reference. However links to security principle and guideline documentation on the BSI site appear to be broken. NIST SP 800-27 uses the terms principle and guideline interchangeably.
    /// </summary>
    [XmlArrayItem("Related_Guideline", IsNullable=false)]
    public List<Structured_Text_Type> Related_Guidelines
    {
        get => _related_Guidelines;
        set => _related_Guidelines = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more purposes. Purpose refers to the intended purpose behind the attack pattern relative to an enumerated list of attack objectives. USAGE: This element is used to capture pattern composibility and assist with normalization and classification of attack patterns within the CAPEC catalog.
    /// </summary>
    [XmlArrayItem("Purpose", IsNullable=false)]
    public List<Attack_PatternTypePurpose> Purposes
    {
        get => _purposes;
        set => _purposes = value;
    }
    
    /// <summary>
    /// This element characterizes the typical relative impact of this pattern on the confidentiality, integrity, and availability of the targeted software.
    /// </summary>
    public Attack_PatternTypeCIA_Impact CIA_Impact
    {
        get => _cIA_Impact;
        set => _cIA_Impact = value;
    }
    
    /// <summary>
    /// This element characterizes the technical context where this pattern is applicable.
    /// </summary>
    public Attack_PatternTypeTechnical_Context Technical_Context
    {
        get => _technical_Context;
        set => _technical_Context = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more keywords. Keyword correspond to text strings used to tag and search CAPEC catalog data.
    /// </summary>
    [XmlArrayItem("Keyword", IsNullable=false)]
    public List<string> Keywords
    {
        get => _keywords;
        set => _keywords = value;
    }
    
    /// <summary>
    /// This element represents a container of one or more references. Reference represents a documentary resource used to develop the definition of this attack pattern.
    /// </summary>
    [XmlArrayItem("Reference", IsNullable=false)]
    public List<Reference_Type> References
    {
        get => _references;
        set => _references = value;
    }
    
    [XmlArrayItem("Note", IsNullable=false)]
    public List<Structured_Text_Type> Other_Notes
    {
        get => _other_Notes;
        set => _other_Notes = value;
    }
    
    [XmlArrayItem("Maintenance_Note", IsNullable=false)]
    public List<Structured_Text_Type> Maintenance_Notes
    {
        get => _maintenance_Notes;
        set => _maintenance_Notes = value;
    }
    
    public Content_History Content_History
    {
        get => _content_History;
        set => _content_History = value;
    }
    
    [XmlAttribute(DataType="integer")]
    [DefaultValue("0")]
    public string ID
    {
        get => _id;
        set => _id = value;
    }
    
    /// <summary>
    /// This field contains the name of this contributor.
    /// </summary>
    [XmlAttribute]
    public string Name
    {
        get => _name;
        set => _name = value;
    }
    
    [XmlAttribute]
    public Attack_PatternTypePattern_Completeness Pattern_Completeness
    {
        get => _pattern_Completeness;
        set => _pattern_Completeness = value;
    }
    
    [XmlAttribute]
    public Attack_PatternTypePattern_Abstraction Pattern_Abstraction
    {
        get => _pattern_Abstraction;
        set => _pattern_Abstraction = value;
    }
    
    /// <summary>
    /// The Status attribute defines the status level for this view.
    /// </summary>
    [XmlAttribute]
    public Status_Type Status
    {
        get => _status;
        set => _status = value;
    }
}
}
#pragma warning restore
