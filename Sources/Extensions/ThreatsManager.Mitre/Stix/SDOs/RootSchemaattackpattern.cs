// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 5.1.98.0. www.xsd2code.com
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace ThreatsManager.Mitre.Stix
{
using System;
using System.Diagnostics;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;
using System.Xml;
using System.IO;
using System.Text;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

[DebuggerStepThrough]
[Newtonsoft.Json.JsonObjectAttribute("RootSchemaattackpattern", MemberSerialization=MemberSerialization.OptIn)]
public partial class RootSchemaattackpattern
{
    #region Private fields
    private string _type;
    private RootSchemaattackpatternSpec_version _spec_version;
    private string _id;
    private string _created_by_ref;
    private List<string> _labels;
    private object _created;
    private object _modified;
    private bool _revoked;
    private int _confidence;
    private string _lang;
    private List<RootSchemaattackpatternExternal_references> _external_references;
    private List<string> _object_marking_refs;
    private List<RootSchemaattackpatternGranular_markings> _granular_markings;
    private List<string> _aliases;
    private string _name;
    private string _description;
    private List<RootSchemaattackpatternKill_chain_phases> _kill_chain_phases;
    private static XmlSerializer _serializer;
    #endregion
    
    public RootSchemaattackpattern()
    {
        _kill_chain_phases = new List<RootSchemaattackpatternKill_chain_phases>();
        _aliases = new List<string>();
        _granular_markings = new List<RootSchemaattackpatternGranular_markings>();
        _object_marking_refs = new List<string>();
        _external_references = new List<RootSchemaattackpatternExternal_references>();
        _labels = new List<string>();
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public string type
    {
        get
        {
            return _type;
        }
        set
        {
            _type = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    [JsonConverter(typeof(StringEnumConverter))]
    public RootSchemaattackpatternSpec_version spec_version
    {
        get
        {
            return _spec_version;
        }
        set
        {
            _spec_version = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public string id
    {
        get
        {
            return _id;
        }
        set
        {
            _id = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public string created_by_ref
    {
        get
        {
            return _created_by_ref;
        }
        set
        {
            _created_by_ref = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public List<string> labels
    {
        get
        {
            return _labels;
        }
        set
        {
            _labels = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public object created
    {
        get
        {
            return _created;
        }
        set
        {
            _created = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public object modified
    {
        get
        {
            return _modified;
        }
        set
        {
            _modified = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public bool revoked
    {
        get
        {
            return _revoked;
        }
        set
        {
            _revoked = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public int confidence
    {
        get
        {
            return _confidence;
        }
        set
        {
            _confidence = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public string lang
    {
        get
        {
            return _lang;
        }
        set
        {
            _lang = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public List<RootSchemaattackpatternExternal_references> external_references
    {
        get
        {
            return _external_references;
        }
        set
        {
            _external_references = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public List<string> object_marking_refs
    {
        get
        {
            return _object_marking_refs;
        }
        set
        {
            _object_marking_refs = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public List<RootSchemaattackpatternGranular_markings> granular_markings
    {
        get
        {
            return _granular_markings;
        }
        set
        {
            _granular_markings = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public List<string> aliases
    {
        get
        {
            return _aliases;
        }
        set
        {
            _aliases = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public string name
    {
        get
        {
            return _name;
        }
        set
        {
            _name = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public string description
    {
        get
        {
            return _description;
        }
        set
        {
            _description = value;
        }
    }
    
    [Newtonsoft.Json.JsonPropertyAttribute()]
    public List<RootSchemaattackpatternKill_chain_phases> kill_chain_phases
    {
        get
        {
            return _kill_chain_phases;
        }
        set
        {
            _kill_chain_phases = value;
        }
    }
    
    private static XmlSerializer SerializerXML
    {
        get
        {
            if ((_serializer == null))
            {
                _serializer = new XmlSerializerFactory().CreateSerializer(typeof(RootSchemaattackpattern));
            }
            return _serializer;
        }
    }
    
    #region Serialize/Deserialize
    /// <summary>
    /// Serialize RootSchemaattackpattern object
    /// </summary>
    /// <returns>XML value</returns>
    public virtual string Serialize()
    {
        StreamReader streamReader = null;
        MemoryStream memoryStream = null;
        try
        {
            memoryStream = new MemoryStream();
            System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
            System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
            SerializerXML.Serialize(xmlWriter, this);
            memoryStream.Seek(0, SeekOrigin.Begin);
            streamReader = new StreamReader(memoryStream);
            return streamReader.ReadToEnd();
        }
        finally
        {
            if ((streamReader != null))
            {
                streamReader.Dispose();
            }
            if ((memoryStream != null))
            {
                memoryStream.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes RootSchemaattackpattern object
    /// </summary>
    /// <param name="input">string workflow markup to deserialize</param>
    /// <param name="obj">Output RootSchemaattackpattern object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool Deserialize(string input, out RootSchemaattackpattern obj, out Exception exception)
    {
        exception = null;
        obj = default(RootSchemaattackpattern);
        try
        {
            obj = Deserialize(input);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool Deserialize(string input, out RootSchemaattackpattern obj)
    {
        Exception exception = null;
        return Deserialize(input, out obj, out exception);
    }
    
    public static RootSchemaattackpattern Deserialize(string input)
    {
        StringReader stringReader = null;
        try
        {
            stringReader = new StringReader(input);
            return ((RootSchemaattackpattern)(SerializerXML.Deserialize(XmlReader.Create(stringReader))));
        }
        finally
        {
            if ((stringReader != null))
            {
                stringReader.Dispose();
            }
        }
    }
    
    public static RootSchemaattackpattern Deserialize(Stream s)
    {
        return ((RootSchemaattackpattern)(SerializerXML.Deserialize(s)));
    }
    #endregion
    
    /// <summary>
    /// Serializes current RootSchemaattackpattern object into file
    /// </summary>
    /// <param name="fileName">full path of outupt xml file</param>
    /// <param name="exception">output Exception value if failed</param>
    /// <returns>true if can serialize and save into file; otherwise, false</returns>
    public virtual bool SaveToFile(string fileName, out Exception exception)
    {
        exception = null;
        try
        {
            SaveToFile(fileName);
            return true;
        }
        catch (Exception e)
        {
            exception = e;
            return false;
        }
    }
    
    public virtual void SaveToFile(string fileName)
    {
        StreamWriter streamWriter = null;
        try
        {
            string dataString = Serialize();
            FileInfo outputFile = new FileInfo(fileName);
            streamWriter = outputFile.CreateText();
            streamWriter.WriteLine(dataString);
            streamWriter.Close();
        }
        finally
        {
            if ((streamWriter != null))
            {
                streamWriter.Dispose();
            }
        }
    }
    
    /// <summary>
    /// Deserializes xml markup from file into an RootSchemaattackpattern object
    /// </summary>
    /// <param name="fileName">string xml file to load and deserialize</param>
    /// <param name="obj">Output RootSchemaattackpattern object</param>
    /// <param name="exception">output Exception value if deserialize failed</param>
    /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
    public static bool LoadFromFile(string fileName, out RootSchemaattackpattern obj, out Exception exception)
    {
        exception = null;
        obj = default(RootSchemaattackpattern);
        try
        {
            obj = LoadFromFile(fileName);
            return true;
        }
        catch (Exception ex)
        {
            exception = ex;
            return false;
        }
    }
    
    public static bool LoadFromFile(string fileName, out RootSchemaattackpattern obj)
    {
        Exception exception = null;
        return LoadFromFile(fileName, out obj, out exception);
    }
    
    public static RootSchemaattackpattern LoadFromFile(string fileName)
    {
        FileStream file = null;
        StreamReader sr = null;
        try
        {
            file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
            sr = new StreamReader(file);
            string dataString = sr.ReadToEnd();
            sr.Close();
            file.Close();
            return Deserialize(dataString);
        }
        finally
        {
            if ((file != null))
            {
                file.Dispose();
            }
            if ((sr != null))
            {
                sr.Dispose();
            }
        }
    }
}
}
#pragma warning restore
