// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.44
//  </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Xml.Serialization;

#pragma warning disable
namespace ThreatsManager.Extensions.Panels.ThreatSources.Cwe
{
    /// <summary>
/// Each View element represents a perspective with which one might look
/// at the weaknesses in CWE. CWE-699 Development Concepts, CWE-1000 Research Concepts
/// and are two examples of Views.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(AnonymousType=true)]
[XmlRoot(Namespace="", IsNullable=false)]
public partial class View
{
    #region Private fields
    private ViewView_Structure _view_Structure;
    private Structured_Text_Type _view_Objective;
    private List<ViewAudience> _view_Audience;
    private List<Relationship> _relationships;
    private List<Structured_Text_Type> _relationship_Notes;
    private List<Structured_Text_Type> _maintenance_Notes;
    private List<Structured_Text_Type> _other_Notes;
    private List<Alternate_TermsAlternate_Term> _alternate_Terms;
    private List<Structured_Text_Type> _research_Gaps;
    private List<Reference_Type> _references;
    private string _view_Filter;
    private Content_History _content_History;
    private string _id;
    private string _name;
    private Status_Type _status;
    #endregion
    
    /// <summary>
    /// View class constructor
    /// </summary>
    public View()
    {
        _content_History = new Content_History();
        _references = new List<Reference_Type>();
        _research_Gaps = new List<Structured_Text_Type>();
        _alternate_Terms = new List<Alternate_TermsAlternate_Term>();
        _other_Notes = new List<Structured_Text_Type>();
        _maintenance_Notes = new List<Structured_Text_Type>();
        _relationship_Notes = new List<Structured_Text_Type>();
        _relationships = new List<Relationship>();
        _view_Audience = new List<ViewAudience>();
        _view_Objective = new Structured_Text_Type();
    }
    
    /// <summary>
    /// The View_Structure element describes how this view is being
    /// constructed. Valid values are: Implicit Slice = a slice based on a filter
    /// criteria; Explicit Slice = a slice based on arbitrary membership, as defined
    /// by specific relationships between entries; Graph = a bounded graphical slice
    /// based on ChildOf relationships.
    /// </summary>
    public ViewView_Structure View_Structure
    {
        get
        {
            return _view_Structure;
        }
        set
        {
            _view_Structure = value;
        }
    }
    
    /// <summary>
    /// The View_Objective element describes the perspective from
    /// which this View is constructed.
    /// </summary>
    public Structured_Text_Type View_Objective
    {
        get
        {
            return _view_Objective;
        }
        set
        {
            _view_Objective = value;
        }
    }
    
    /// <summary>
    /// The View_Audience element provides a reference to the
    /// targeted audiences or groups for this view.
    /// </summary>
    [XmlArrayItem("Audience", IsNullable=false)]
    public List<ViewAudience> View_Audience
    {
        get
        {
            return _view_Audience;
        }
        set
        {
            _view_Audience = value;
        }
    }
    
    [XmlArrayItem("Relationship", IsNullable=false)]
    public List<Relationship> Relationships
    {
        get
        {
            return _relationships;
        }
        set
        {
            _relationships = value;
        }
    }
    
    [XmlArrayItem("Relationship_Note", IsNullable=false)]
    public List<Structured_Text_Type> Relationship_Notes
    {
        get
        {
            return _relationship_Notes;
        }
        set
        {
            _relationship_Notes = value;
        }
    }
    
    [XmlArrayItem("Maintenance_Note", IsNullable=false)]
    public List<Structured_Text_Type> Maintenance_Notes
    {
        get
        {
            return _maintenance_Notes;
        }
        set
        {
            _maintenance_Notes = value;
        }
    }
    
    [XmlArrayItem("Note", IsNullable=false)]
    public List<Structured_Text_Type> Other_Notes
    {
        get
        {
            return _other_Notes;
        }
        set
        {
            _other_Notes = value;
        }
    }
    
    [XmlArrayItem("Alternate_Term", IsNullable=false)]
    public List<Alternate_TermsAlternate_Term> Alternate_Terms
    {
        get
        {
            return _alternate_Terms;
        }
        set
        {
            _alternate_Terms = value;
        }
    }
    
    [XmlArrayItem("Research_Gap", IsNullable=false)]
    public List<Structured_Text_Type> Research_Gaps
    {
        get
        {
            return _research_Gaps;
        }
        set
        {
            _research_Gaps = value;
        }
    }
    
    /// <summary>
    /// The References element contains one or more Reference
    /// elements, each of which provide further reading and insight into this view.
    /// This should be filled out when the view is based on sources or projects that
    /// are external to the CWE project.
    /// </summary>
    [XmlArrayItem("Reference", IsNullable=false)]
    public List<Reference_Type> References
    {
        get
        {
            return _references;
        }
        set
        {
            _references = value;
        }
    }
    
    /// <summary>
    /// The View_Filter element holds an XSL query for identifying
    /// which elements are members of an implicit slice. This should only be present
    /// for implicit slices.
    /// </summary>
    public string View_Filter
    {
        get
        {
            return _view_Filter;
        }
        set
        {
            _view_Filter = value;
        }
    }
    
    public Content_History Content_History
    {
        get
        {
            return _content_History;
        }
        set
        {
            _content_History = value;
        }
    }
    
    /// <summary>
    /// The ID attribute provides a unique identifier for the entry.
    /// It will be static for the lifetime of the entry. In the event that this
    /// entry becomes deprecated, the ID will not be reused and a pointer will be
    /// left in this entry to the replacement. This is required for all Views.
    /// </summary>
    [XmlAttribute(DataType="integer")]
    public string ID
    {
        get
        {
            return _id;
        }
        set
        {
            _id = value;
        }
    }
    
    /// <summary>
    /// The Name is a descriptive attribute used to give the reader
    /// an idea of what perspective this view represents. All words in the name
    /// should be capitalized except for articles and prepositions unless they begin
    /// or end the name. Subsequent words in a hyphenated chain are also not
    /// capitalized. This is required for all Views.
    /// </summary>
    [XmlAttribute]
    public string Name
    {
        get
        {
            return _name;
        }
        set
        {
            _name = value;
        }
    }
    
    /// <summary>
    /// The Status attribute defines the status level for this view.
    /// </summary>
    [XmlAttribute]
    public Status_Type Status
    {
        get
        {
            return _status;
        }
        set
        {
            _status = value;
        }
    }
}
}
#pragma warning restore
