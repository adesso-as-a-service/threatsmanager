using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using PostSharp.Patterns.Contracts;
using PostSharp.Patterns.Recording;
using PostSharp.Patterns.Model;
using ThreatsManager.Engine.Aspects;
using ThreatsManager.Interfaces;
using ThreatsManager.Interfaces.ObjectModel;
using ThreatsManager.Interfaces.ObjectModel.Properties;
using ThreatsManager.Interfaces.ObjectModel.ThreatsMitigations;
using ThreatsManager.Utilities;
using ThreatsManager.Utilities.Aspects;
using ThreatsManager.Utilities.Aspects.Engine;

namespace ThreatsManager.Engine.ObjectModel.ThreatsMitigations
{
#pragma warning disable CS0067
    [JsonObject(MemberSerialization.OptIn)]
    [Serializable]
    [NotifyPropertyChanged]
    [ThreatModelChildAspect]
    [ThreatEventChildAspect]
    [PropertiesContainerAspect]
    [Recordable(AutoRecord = false)]
    [Undoable]
    public class ThreatEventVulnerability : IThreatEventVulnerability, IInitializableObject
    {
        public ThreatEventVulnerability()
        {

        }

        public ThreatEventVulnerability([NotNull] IThreatEvent threatEvent, [NotNull] IVulnerability vulnerability) : this()
        {
            _model = threatEvent.Model;
            _threatEvent = threatEvent;
            _vulnerability = vulnerability;
        }

        public bool IsInitialized => Model != null && _threatEventId != Guid.Empty && _vulnerabilityId != Guid.Empty;

        #region Default implementation.
        [Reference]
        [field: NotRecorded]
        public IThreatModel Model { get; }

        public event Action<IPropertiesContainer, IProperty> PropertyAdded;
        public event Action<IPropertiesContainer, IProperty> PropertyRemoved;
        public event Action<IPropertiesContainer, IProperty> PropertyValueChanged;
        [Reference]
        [field: NotRecorded]
        public IEnumerable<IProperty> Properties { get; }
        public bool HasProperty(IPropertyType propertyType)
        {
            return false;
        }
        public IProperty GetProperty(IPropertyType propertyType)
        {
            return null;
        }

        public IProperty AddProperty(IPropertyType propertyType, string value)
        {
            return null;
        }

        public bool RemoveProperty(IPropertyType propertyType)
        {
            return false;
        }

        public bool RemoveProperty(Guid propertyTypeId)
        {
            return false;
        }

        public void ClearProperties()
        {
        }

        public void Apply(IPropertySchema schema)
        {
        }

        [Reference]
        [field: NotRecorded]
        public IThreatEvent ThreatEvent { get; }
        #endregion

        #region Additional placeholders required.
        [JsonProperty("modelId")]
        protected Guid _modelId { get; set; }
        [Reference]
        [field: NotRecorded]
        [field: UpdateId("Id", "_modelId")]
        [field: AutoApplySchemas]
        protected IThreatModel _model { get; set; }
        [Child]
        [JsonProperty("properties")]
        private IList<IProperty> _properties { get; set; }
        [JsonProperty("threatEventId")]
        private Guid _threatEventId { get; set; }
        [Reference]
        [field: NotRecorded]
        [field: UpdateId("Id", "_threatEventId")]
        private IThreatEvent _threatEvent { get; set; }
        #endregion

        #region Specific implementation.
        public Scope PropertiesScope => Scope.ThreatEventVulnerability;

        [JsonProperty("vulnerabilityId")]
        [NotRecorded]
        private Guid _vulnerabilityId;

        public Guid VulnerabilityId => _vulnerabilityId;

        [Reference]
        [NotRecorded]
        [UpdateId("Id", "_vulnerabilityId")]
        private IVulnerability _vulnerability;

        [IgnoreAutoChangeNotification]
        public IVulnerability Vulnerability
        {
            get
            {
                if (_vulnerability == null)
                {
                    _vulnerability = Model?.FindVulnerability(_vulnerabilityId);
                }

                return _vulnerability;
            }
        }

        public IThreatEventVulnerability Clone(IThreatEventVulnerabilitiesContainer container)
        {
            ThreatEventVulnerability result = null;

            if (container is IThreatEvent threatEvent && threatEvent.Model is IThreatModel model)
            {
                result = new ThreatEventVulnerability
                {
                    _threatEventId = threatEvent.Id,
                    _vulnerabilityId = VulnerabilityId,
                    _model = model
                };
                this.CloneProperties(result);
                container.Add(result);
            }

            return result;
        }

        public override string ToString()
        {
            return Vulnerability.Name ?? "<undefined>";
        }
        #endregion
    }
}