// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.44
//  </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Xml.Serialization;

#pragma warning disable
namespace ThreatsManager.Extensions.Panels.ThreatSources.Capec
{
    /// <summary>
/// The MeasureSourceType is a type representing a description of a single cyber observation source.
/// </summary>
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
[Serializable]
[DebuggerStepThrough]
[DesignerCategory("code")]
[XmlType(Namespace="http://cybox.mitre.org/common-2")]
public partial class MeasureSourceType
{
    #region Private fields
    private ControlledVocabularyStringType _information_Source_Type;
    private ControlledVocabularyStringType _tool_Type;
    private StructuredTextType _description;
    private List<ContributorType> _contributors;
    private TimeType _time;
    private LocationType _observation_Location;
    private List<ToolInformationType> _tools;
    private PlatformSpecificationType _platform;
    private ObjectPropertiesType _system;
    private ObjectPropertiesType _instance;
    private LocationType _observable_Location;
    private SourceClassTypeEnum _class;
    private SourceTypeEnum _source_type;
    private string _name;
    private string _sighting_count;
    #endregion
    
    /// <summary>
    /// MeasureSourceType class constructor
    /// </summary>
    public MeasureSourceType()
    {
        _observable_Location = new LocationType();
        _platform = new PlatformSpecificationType();
        _tools = new List<ToolInformationType>();
        _observation_Location = new LocationType();
        _time = new TimeType();
        _contributors = new List<ContributorType>();
        _description = new StructuredTextType();
        _tool_Type = new ControlledVocabularyStringType();
        _information_Source_Type = new ControlledVocabularyStringType();
    }
    
    /// <summary>
    /// The Information_Source_Type field is optional and utilizes a standardized controlled vocabulary to identify the type of information source leveraged for this cyber observation source.
    /// </summary>
    /// <summary>
    /// This field is implemented through the xsi:type controlled vocabulary extension mechanism. The default vocabulary type is InformationSourceTypeVocab in the http://cybox.mitre.org/default_vocabularies-2 namespace. This type is defined in the cybox_default_vocabularies.xsd file or at the URL http://cybox.mitre.org/XMLSchema/default_vocabularies/2.0.1/cybox_default_vocabularies.xsd.
    /// </summary>
    /// <summary>
    /// Users may also define their own vocabulary using the type extension mechanism (by specifying a vocabulary name and/or reference using the vocab_name and vocab_reference attributes, respectively) or simply use this as a string field.
    /// </summary>
    public ControlledVocabularyStringType Information_Source_Type
    {
        get => _information_Source_Type;
        set => _information_Source_Type = value;
    }
    
    /// <summary>
    /// The Tool_Type field is optional and (when tools are used) enables identification of the type of tool leveraged as part of this cyber observation source, via a standardized controlled vocabulary.
    /// </summary>
    /// <summary>
    /// This field is implemented through the xsi:type controlled vocabulary extension mechanism. The default vocabulary type is ToolTypeVocab in the http://cybox.mitre.org/default_vocabularies-2 namespace. This type is defined in the cybox_default_vocabularies.xsd file or at the URL http://cybox.mitre.org/XMLSchema/default_vocabularies/2.0.1/cybox_default_vocabularies.xsd.
    /// </summary>
    /// <summary>
    /// Users may also define their own vocabulary using the type extension mechanism (by specifying a vocabulary name and/or reference using the vocab_name and vocab_reference attributes, respectively) or simply use this as a string field.
    /// </summary>
    public ControlledVocabularyStringType Tool_Type
    {
        get => _tool_Type;
        set => _tool_Type = value;
    }
    
    /// <summary>
    /// The Description field is optional and enables a generalized but structured description of this syber observation source.
    /// </summary>
    public StructuredTextType Description
    {
        get => _description;
        set => _description = value;
    }
    
    /// <summary>
    /// The Contributors field is optional and enables description of the individual contributors involved in this cyber observation source.
    /// </summary>
    [XmlArrayItem("Contributor", IsNullable=false)]
    public List<ContributorType> Contributors
    {
        get => _contributors;
        set => _contributors = value;
    }
    
    /// <summary>
    /// The Time field is optional and enables description of various time-related properties for this cyber observation source instance.
    /// </summary>
    public TimeType Time
    {
        get => _time;
        set => _time = value;
    }
    
    /// <summary>
    /// The Observation_Location field specifies a relevant physical location for the observation measurement of the associated Observable.
    /// </summary>
    /// <summary>
    /// This field is implemented through the xsi:type extension mechanism. The default type is CIQAddressInstanceType in the http://cybox.mitre.org/extensions/Identity#CIQAddress-1 namespace. This type is defined in the extensions/location/ciq_address_3.0.xsd file or at the URL http://cybox.mitre.org/XMLSchema/extensions/location/ciq_address/1.0/ciq_address_3.0.xsd.
    /// </summary>
    /// <summary>
    /// Those who wish to express a simple name may also do so by not specifying an xsi:type and using the Name field.
    /// </summary>
    public LocationType Observation_Location
    {
        get => _observation_Location;
        set => _observation_Location = value;
    }
    
    /// <summary>
    /// The Tools field is optional and enables description of the tools utilized for this cyber observation source.
    /// </summary>
    [XmlArrayItem("Tool", IsNullable=false)]
    public List<ToolInformationType> Tools
    {
        get => _tools;
        set => _tools = value;
    }
    
    /// <summary>
    /// The Platform field is optional and enables a formal, standardized specification of the platform for this cyber observation source.
    /// </summary>
    public PlatformSpecificationType Platform
    {
        get => _platform;
        set => _platform = value;
    }
    
    /// <summary>
    /// The System field is optional and enables characterization of the system on which the mechanism of cyber observation executed. System should be an object of type SystemObj:SystemObjectType.
    /// </summary>
    public ObjectPropertiesType System
    {
        get => _system;
        set => _system = value;
    }
    
    /// <summary>
    /// The Instance field is optional and enables characterization of the process instance in which the mechanism of cyber observation executed. Instance should be of type ProcessObj:ProcessObjectType.
    /// </summary>
    public ObjectPropertiesType Instance
    {
        get => _instance;
        set => _instance = value;
    }
    
    /// <summary>
    /// The Observable_Location field specifies a relevant physical location for the associated Observable.
    /// </summary>
    /// <summary>
    /// This field is implemented through the xsi:type extension mechanism. The default type is CIQAddressInstanceType in the http://cybox.mitre.org/extensions/Identity#CIQAddress-1 namespace. This type is defined in the extensions/location/ciq_address_3.0.xsd file or at the URL http://cybox.mitre.org/XMLSchema/extensions/location/ciq_address/1.0/ciq_address_3.0.xsd.
    /// </summary>
    /// <summary>
    /// Those who wish to express a simple name may also do so by not specifying an xsi:type and using the Name field.
    /// </summary>
    public LocationType Observable_Location
    {
        get => _observable_Location;
        set => _observable_Location = value;
    }
    
    /// <summary>
    /// The class field is optional and enables identification of the high-level class of this cyber observation source.
    /// </summary>
    [XmlAttribute]
    public SourceClassTypeEnum @class
    {
        get => _class;
        set => _class = value;
    }
    
    /// <summary>
    /// The source_type field is optional and enables identification of the broad type of this cyber observation source.
    /// </summary>
    [XmlAttribute]
    public SourceTypeEnum source_type
    {
        get => _source_type;
        set => _source_type = value;
    }
    
    /// <summary>
    /// The name field is optional and enables the assignment of a relevant name to this Discovery Method.
    /// </summary>
    [XmlAttribute]
    public string name
    {
        get => _name;
        set => _name = value;
    }
    
    /// <summary>
    /// The sighting_count field specifies how many different identical instances of a given Observable may have been seen/sighted by the observation source.
    /// </summary>
    [XmlAttribute(DataType="positiveInteger")]
    public string sighting_count
    {
        get => _sighting_count;
        set => _sighting_count = value;
    }
}
}
#pragma warning restore
