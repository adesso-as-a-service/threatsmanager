//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Tmt.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ThreatsManager.MsTmt.Model.AutoThreatGen {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class TmtParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PROPERTY=1, FLOW=2, SOURCE=3, TARGET=4, IS=5, CROSSES=6, AND=7, OR=8, 
		NOT=9, LPAREN=10, RPAREN=11, CHARACTER=12, CHARACTER_POINT=13, TEXT=14, 
		WHITESPACE=15;
	public const int
		RULE_parse = 0, RULE_expression = 1, RULE_operator = 2, RULE_boolean = 3, 
		RULE_subjectproperty = 4, RULE_subject = 5;
	public static readonly string[] ruleNames = {
		"parse", "expression", "operator", "boolean", "subjectproperty", "subject"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'flow'", "'source'", "'target'", "'is'", "'crosses'", "'and'", 
		"'or'", "'not'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PROPERTY", "FLOW", "SOURCE", "TARGET", "IS", "CROSSES", "AND", 
		"OR", "NOT", "LPAREN", "RPAREN", "CHARACTER", "CHARACTER_POINT", "TEXT", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Tmt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TmtParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TmtParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TmtParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TmtParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			expression(0);
			State = 13;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubjectExpressionContext : ExpressionContext {
		public SubjectContext left;
		public IToken op;
		public IToken right;
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(TmtParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TmtParser.TEXT, 0); }
		public SubjectExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterSubjectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitSubjectExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubjectExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(TmtParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanExpressionContext : ExpressionContext {
		public ExpressionContext left;
		public BooleanContext op;
		public ExpressionContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanContext boolean() {
			return GetRuleContext<BooleanContext>(0);
		}
		public BooleanExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyExpressionContext : ExpressionContext {
		public SubjectpropertyContext left;
		public IToken op;
		public IToken right;
		[System.Diagnostics.DebuggerNonUserCode] public SubjectpropertyContext subjectproperty() {
			return GetRuleContext<SubjectpropertyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(TmtParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TmtParser.TEXT, 0); }
		public PropertyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterPropertyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitPropertyExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FlowExpressionContext : ExpressionContext {
		public IToken left;
		public OperatorContext op;
		public IToken right;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOW() { return GetToken(TmtParser.FLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TmtParser.TEXT, 0); }
		public FlowExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterFlowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitFlowExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFlowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(TmtParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(TmtParser.RPAREN, 0); }
		public ParentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterParentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitParentExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new ParentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 16;
				Match(LPAREN);
				State = 17;
				expression(0);
				State = 18;
				Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 20;
				Match(NOT);
				State = 21;
				expression(5);
				}
				break;
			case 3:
				{
				_localctx = new PropertyExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22;
				((PropertyExpressionContext)_localctx).left = subjectproperty();
				State = 23;
				((PropertyExpressionContext)_localctx).op = Match(IS);
				State = 24;
				((PropertyExpressionContext)_localctx).right = Match(TEXT);
				}
				break;
			case 4:
				{
				_localctx = new SubjectExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 26;
				((SubjectExpressionContext)_localctx).left = subject();
				State = 27;
				((SubjectExpressionContext)_localctx).op = Match(IS);
				State = 28;
				((SubjectExpressionContext)_localctx).right = Match(TEXT);
				}
				break;
			case 5:
				{
				_localctx = new FlowExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 30;
				((FlowExpressionContext)_localctx).left = Match(FLOW);
				State = 31;
				((FlowExpressionContext)_localctx).op = @operator();
				State = 32;
				((FlowExpressionContext)_localctx).right = Match(TEXT);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 42;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BooleanExpressionContext(new ExpressionContext(_parentctx, _parentState));
					((BooleanExpressionContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 36;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 37;
					((BooleanExpressionContext)_localctx).op = boolean();
					State = 38;
					((BooleanExpressionContext)_localctx).right = expression(5);
					}
					} 
				}
				State = 44;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(TmtParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSSES() { return GetToken(TmtParser.CROSSES, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			_la = TokenStream.LA(1);
			if ( !(_la==IS || _la==CROSSES) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND() { return GetToken(TmtParser.AND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR() { return GetToken(TmtParser.OR, 0); }
		public BooleanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanContext boolean() {
		BooleanContext _localctx = new BooleanContext(Context, State);
		EnterRule(_localctx, 6, RULE_boolean);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectpropertyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROPERTY() { return GetToken(TmtParser.PROPERTY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOW() { return GetToken(TmtParser.FLOW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubjectContext subject() {
			return GetRuleContext<SubjectContext>(0);
		}
		public SubjectpropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subjectproperty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterSubjectproperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitSubjectproperty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubjectproperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectpropertyContext subjectproperty() {
		SubjectpropertyContext _localctx = new SubjectpropertyContext(Context, State);
		EnterRule(_localctx, 8, RULE_subjectproperty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FLOW:
				{
				State = 49;
				Match(FLOW);
				}
				break;
			case SOURCE:
			case TARGET:
				{
				State = 50;
				subject();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 53;
			Match(PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE() { return GetToken(TmtParser.SOURCE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TARGET() { return GetToken(TmtParser.TARGET, 0); }
		public SubjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.EnterSubject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ITmtListener typedListener = listener as ITmtListener;
			if (typedListener != null) typedListener.ExitSubject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITmtVisitor<TResult> typedVisitor = visitor as ITmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubjectContext subject() {
		SubjectContext _localctx = new SubjectContext(Context, State);
		EnterRule(_localctx, 10, RULE_subject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_la = TokenStream.LA(1);
			if ( !(_la==SOURCE || _la==TARGET) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,15,58,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,1,0,1,0,1,0,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,3,1,35,8,1,1,1,1,1,1,1,1,1,5,1,41,8,1,10,1,12,1,44,9,1,1,2,1,2,1,
		3,1,3,1,4,1,4,3,4,52,8,4,1,4,1,4,1,5,1,5,1,5,0,1,2,6,0,2,4,6,8,10,0,3,
		1,0,5,6,1,0,7,8,1,0,3,4,57,0,12,1,0,0,0,2,34,1,0,0,0,4,45,1,0,0,0,6,47,
		1,0,0,0,8,51,1,0,0,0,10,55,1,0,0,0,12,13,3,2,1,0,13,14,5,0,0,1,14,1,1,
		0,0,0,15,16,6,1,-1,0,16,17,5,10,0,0,17,18,3,2,1,0,18,19,5,11,0,0,19,35,
		1,0,0,0,20,21,5,9,0,0,21,35,3,2,1,5,22,23,3,8,4,0,23,24,5,5,0,0,24,25,
		5,14,0,0,25,35,1,0,0,0,26,27,3,10,5,0,27,28,5,5,0,0,28,29,5,14,0,0,29,
		35,1,0,0,0,30,31,5,2,0,0,31,32,3,4,2,0,32,33,5,14,0,0,33,35,1,0,0,0,34,
		15,1,0,0,0,34,20,1,0,0,0,34,22,1,0,0,0,34,26,1,0,0,0,34,30,1,0,0,0,35,
		42,1,0,0,0,36,37,10,4,0,0,37,38,3,6,3,0,38,39,3,2,1,5,39,41,1,0,0,0,40,
		36,1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,3,1,0,0,0,44,42,
		1,0,0,0,45,46,7,0,0,0,46,5,1,0,0,0,47,48,7,1,0,0,48,7,1,0,0,0,49,52,5,
		2,0,0,50,52,3,10,5,0,51,49,1,0,0,0,51,50,1,0,0,0,52,53,1,0,0,0,53,54,5,
		1,0,0,54,9,1,0,0,0,55,56,7,2,0,0,56,11,1,0,0,0,3,34,42,51
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ThreatsManager.MsTmt.Model.AutoThreatGen
